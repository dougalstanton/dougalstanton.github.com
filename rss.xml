<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Looking Out To Sea</title>
        <link>http://dougalstanton.net</link>
        <description><![CDATA[A blog of sorts, unsorted.]]></description>
        <atom:link href="http://dougalstanton.net/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sun, 21 Apr 2013 00:00:00 UT</lastBuildDate>
        <item>
    <title>The world discovers that programming is not easy</title>
    <link>http://dougalstanton.net/posts/2013-04-21-the-world-discovers-that-programming-is-not-easy.html</link>
    <description><![CDATA[<p>It has recently been shown that <a href="http://www.guardian.co.uk/politics/2013/apr/18/uncovered-error-george-osborne-austerity" title="Erroneous Excel spreadsheet source for austerity measures">a 2010 economics paper built around an Excel spreadsheet contained an important error</a>, and this error came from the code in the spreadsheet itself. To be exact, some conclusions of the paper hinged on a spreadsheet bug.</p>
<p>So it becomes clear to the world at large that Excel spreadsheets are programming, and being programming they will almost definitely contain bugs.</p>
<blockquote>
<p>As soon as we started programming, we found to our surprise that it wasn’t as easy to get programs right as we had thought. Debugging had to be discovered. I can remember the exact instant when I realized that a large part of my life from then on was going to be spent in finding mistakes in my own programs.</p>
<p>— Maurice Wilkes discovers debugging, 1949</p>
</blockquote>
<p>I have a particular interest here because I believe that programming should be something more widely taught and understood. Part of this greater understanding and familiarity will of course hammer home a truth understood by programmers all over the world: it’s very easy to make a mistake which doesn’t show up until too late.</p>]]></description>
    <pubDate>Sun, 21 Apr 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-04-21-the-world-discovers-that-programming-is-not-easy.html</guid>
</item>
<item>
    <title>Finally, proof I can read</title>
    <link>http://dougalstanton.net/posts/2013-04-13-finally-proof-i-can-read.html</link>
    <description><![CDATA[<p>It’s been ages since I finished a book. I’m having real trouble sticking to it right now but I’m not sure why. I guess everything I pick up isn’t engaging me but that doesn’t answer the question why my current threshold for engagement is so high.</p>
<p>So I’m happy to state that I finished <a href="http://en.wikipedia.org/wiki/Lost_at_Sea_(comics)" title="Lost at Sea, the graphic novel">Lost at Sea by Bryan Lee O’Malley</a>, who is also the author of the Scott Pilgrim series. (Which for the record I haven’t read or seen the film, I just found this fact interesting.) I enjoyed it greatly. It’s about a girl discovering some friends on an accidental road trip and deals with the important issues of the day — whether cats can steal your soul, that kind of thing.</p>
<p>And it’s a graphic novel/comic and short, which goes more than some way to explain why I managed to finish it. It probably only has about 20 pages worth of text, but the medium doesn’t require many words. It’s unlikely I can claim that each picture adds another thousand to the word count.</p>]]></description>
    <pubDate>Sat, 13 Apr 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-04-13-finally-proof-i-can-read.html</guid>
</item>
<item>
    <title>Comics from the halfbakery</title>
    <link>http://dougalstanton.net/posts/2013-04-10-comics-from-the-halfbakery.html</link>
    <description><![CDATA[<p>I have finally got my act together and started writing some code and even uploaded it! Check out <a href="http://github.com/dougalstanton/comicbake">http://github.com/dougalstanton/comicbake</a> where you will find the latest copy of the long-dormant Comic Bake.</p>
<p>So what is Comic Bake? What was it back in the day? It’s a tool for converting little text files into comics. The files are designed to be as easy to write as possible, and are inspired by the likes of play scripts and Markdown documents.</p>
<p>The actual format is actually in a bit of flux at the moment as I recently decided what I was using wasn’t ideal and so I’ve cleaned things up. In fact last night was spent cleaning up the parser considerably, not least because the code was several years old and my understanding of parser combinators and such has moved on since then. I’ve had more practice!</p>
<p>The scripts are combined with standard images provided by the user<sup><a href="#fn1" class="footnoteRef" id="fnref1">1</a></sup> and the resulting comic strip, with text in bubbles and all that, written back out to disk. I’m always shocked that it works, to be honest!</p>
<p>At some point obviously I want to (a) put it on Hackage and maybe (b) look into binary releases so people don’t have to install the entirety of the Haskell Platform and various development libraries (ImageMagick <em>and</em> GD, talk about indecisive!) just to use it. It’s not quite at the initial release stage yet though. I want to make it a bit more usable and maybe improve the algorithm for speech bubble placement before I do that.</p>
<p>But I’m glad I pulled it out of the archive; I’m feeling really good about it now and finally getting to do some interesting coding after a long period of stagnation.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>I realise as I write this that it would be a lot easier to use if there were “standard” images. Creating image maps so that Comic Bake knows where each character is has always been the least usable part of the experience. If I provide some defaults then what used to be the only way to do things now becomes “advanced” — there if you want it but not necessary.<a href="#fnref1">↩</a></p></li>
</ol>
</div>]]></description>
    <pubDate>Wed, 10 Apr 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-04-10-comics-from-the-halfbakery.html</guid>
</item>
<item>
    <title>Looking to windward</title>
    <link>http://dougalstanton.net/posts/2013-04-03-looking-to-windward.html</link>
    <description><![CDATA[<p>One of my absolute favourite authors, Iain (M) Banks, has announced he has late-stage cancer and is not expected to live out the year.</p>
<p>While he is making the most of his final months with family and friends the rest of the literary world is mourning him. This will no doubt come as a slight shock to him, but it isn’t surprising to me. He wrote some <em>exceedingly good books</em>.</p>
<p>Meanwhile the rest of us will maybe try to <a href="http://www.johnblackwriter.com/2012/10/04/poetic-licence-iain-m-banks-consider-phlebas-and-t-s-eliots-the-waste-land/" title="Iain M Banks and TS Eliot">grasp that wheel harder</a>.</p>]]></description>
    <pubDate>Wed, 03 Apr 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-04-03-looking-to-windward.html</guid>
</item>
<item>
    <title>Glasgow capoeira is going to need a new training hall</title>
    <link>http://dougalstanton.net/posts/2013-03-29-glasgow-capoeira-is-going-to-need-a-new-training-hall.html</link>
    <description><![CDATA[<p>You might have seen in the news that there was a fire at a school in Glasgow. What you might not have known was that this school was also where <a href="http://maonochao.org/2013/03/26/sad-news-for-glasgow/" title="Sad news for us!">Mao No Chao Glasgow</a> trained every Thursday evening at 6.30.</p>
<p>I’ve not been down to see the building, or at least what remains of it, but the fire was going basically all day so I suspect there isn’t much left but the stone exterior walls. And they’ll be too damaged for the building to be deemed sound I would guess.</p>
<p>As a group we have often spoken of trying to find new premises but it’s very easy not to put in effort or make decisions when you have something. This fire has forced our hand and we’ve already had serious discussions about a couple of venues nearby.</p>
<p>By next Thursday I hope I’ll be able to say “we have tried one new training area”, and maybe we’ll have tried out another not long after that. It would be great to end somewhere that gives us more visibility to fitness types (like a real gym) or that is in an easily accessible place.</p>
<p>Here’s to us, rising from the ashes!</p>]]></description>
    <pubDate>Fri, 29 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-03-29-glasgow-capoeira-is-going-to-need-a-new-training-hall.html</guid>
</item>
<item>
    <title>More exciting handstand news</title>
    <link>http://dougalstanton.net/posts/2013-03-27-more-exciting-handstand-news.html</link>
    <description><![CDATA[<p>Okay so probably not as exciting for you as it is for me, but today I had one of those little victories that’s worth writing about.</p>
<p>Today I managed a couple of really lengthy handstands which were totally unsupported. One of them I actually had to stop because nothing was going to happen to stop it otherwise. Now honestly I don’t know what the actual measurement would have been but I’m guessing at least ten seconds of freestanding inversion without overshooting.</p>
<p>In the last fortnight I’d been slightly worried that I was reaching a plateau so I’ve been trying to force new difficulties into my five minutes. The first being, obviously, doing them well away from the wall so I risk overshooting. The second is making them harder by going in sideways — more of a cartwheel entrance rather than face-on. This is more capoeira-focused so I’ve also been trying to <em>not</em> look at the ground as I place my hands but to keep my eyes on my imaginary opponent.</p>
<p>Between all these things I’ve managed to push through the stage last week where I thought I was stagnating — to produce exciting new freestanding developments. Just from five minutes every day.</p>]]></description>
    <pubDate>Wed, 27 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-03-27-more-exciting-handstand-news.html</guid>
</item>
<item>
    <title>Key management (in the real world)</title>
    <link>http://dougalstanton.net/posts/2013-03-26-key-management.html</link>
    <description><![CDATA[<p>There isn’t really a solution to having too many keys. You just have to make one mistake with that jailer’s bunch that you haul around everywhere — and suddenly you can’t get into your house, you can’t open up at work, you can’t unlock your bike, and so on until you begin to wonder: why haven’t we solved this yet?</p>
<p>Thankfully this hasn’t happened to me, but it has happened very recently to someone that I know. And I’m conscious that I do have a fairly large bunch of keys with me at all times, which is a liability.</p>
<p>There’s not even a comfortable way to carry them in my pocket without jabbing myself in the leg. I’d love to leave most of them at home; maybe have some kind of thumb-print access for the flat or something. Or voice recognition, that would be good (until it doesn’t work).</p>]]></description>
    <pubDate>Tue, 26 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-03-26-key-management.html</guid>
</item>
<item>
    <title>Thoughts from the saddle</title>
    <link>http://dougalstanton.net/posts/2013-03-20-thoughts-from-the-saddle.html</link>
    <description><![CDATA[<p>We’re finally making it out of winter — in fact, I believe this is the vernal equinox? — and it’s no longer pitch dark when I leave work. Just in time for the lighter evenings, we both had the front lights from our bikes stolen on Monday evening.</p>
<p>I’ve seen a lot of suggestions for different styles of bike lights in the last couple of years, and now I’m obviously in the market for something new. My previous front light was very difficult to whip on and off the bike, which is why I tended to leave it there. I won’t make that mistake again. I’ve even seen suggestions for indicator lights for bikes, though the problem with cyclists is we don’t have <strong>width</strong> and so drivers look right through us. So not only do they not really see us whether we’ve got lights on or not, but indicators wouldn’t be mounted far enough apart to be very obvious at a distance. I suppose if you had a big 2D array of LEDs hanging off the back of the saddle with an animated arrow it might do something.</p>
<p>But really I don’t think the issue is one of clouded intent — if anybody cares to look they should see my road position (much more obvious when you’re a tiny fraction of the lane width), the direction I’m looking and that I’m frequently checking behind me. All this even <em>if</em> it is unsafe to indicate with my hands. (The two occasions I’ve been thrown from my bike by potholes I had only one hand steering because I was indicating with the other. I now only indicate when obviously safe to do so.)</p>
<p>Drivers don’t often take the time to look and that is where the real problem lies. Forethought and patience seem to be thin on the ground sometimes too. The number of drivers who appear to wait until pinch points in the road — traffic islands, delivery vans stopped on narrow streets, etc — before overtaking never ceases to amaze.</p>
<p>Last month I experimented with taking a shorter train journey and a correspondingly longer bike ride when commuting to work. This provided financial savings but the risk to my life seemed to fly out of control. One car driver tried to nudge me out of the way as I exited a roundabout. A bus driver tried to run me off the road twice in one journey (once on a narrow bridge, once at a traffic island — see a theme?). I made a complaint to <a href="http://www.stuartscoachescarlukeml8.co.uk/" title="Stuarts of Carluke, belligerent buses of Lanarkshire">Stuarts of Carluke</a> and though the man was very apologetic on the phone I doubt anything came of it. I’ve gone back to the longer train journey.</p>]]></description>
    <pubDate>Wed, 20 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-03-20-thoughts-from-the-saddle.html</guid>
</item>
<item>
    <title>A rational approach to mixing your drinks</title>
    <link>http://dougalstanton.net/posts/2013-03-16-rational-approach-to-mixing-your-drinks.html</link>
    <description><![CDATA[<p>Many of the classic cocktails follow a very simple proportional structure and can be simply adapted to other styles. Like making bread, I suppose. There’s some fundamentals which are dead easy to play with and still produce great results.</p>
<p>The style I’m talking about is called a “sour”. You need:</p>
<ul>
<li>ice for mixing and something to mix it in</li>
<li>some glasses</li>
<li>spirits and mixers, chosen carefully from whatever you have lying around…</li>
</ul>
<p>The basic idea is that you have 3 ingredients mixed in a 4:2:1 ratio (others may quibble, this is what I use). That means I normally use 60ml + 30ml + 15ml = 105ml per person, which is a decent-sized drink. You might feel happier scaling it down to 50+25+12 if you feel like something less hardcore. :-)</p>
<p>The largest ingredient, which we’ll call the base, is the spirit that sets the tone for the rest of the drink. I’m talking gin, tequila, brandy and others. The next two ingredients are sweet and sour, in that order. The sweet can be a liqueur or it can be a sugar syrup. And finally we need the sourness, typically lemon juice or lime juice.</p>
<p>The process is simple — throw everything in a container and shake until thoroughly cooled. Strain out into glasses. (It’s nice to sieve the drink properly as you pour into your glass because citrus juices tend to have chunks which cloud the drink. But maybe you’re not bothered about that. Don’t make a fuss if you don’t want to.)</p>
<p>So what have you made?</p>
<dl>
<dt>Whisky Sour, Brandy Sour, …</dt>
<dd>Your named spirit plus sugar syrup and lemon juice. Nothing simpler.
</dd>
<dt>Sidecar</dt>
<dd>Cognac, sweetened with Cointreau and soured with lemon juice.
</dd>
<dt>White Lady</dt>
<dd>A Sidecar, but using gin instead of cognac. Also known as a Chelsea Sidecar. The Cointreau and lemon juice remain. This is one of our favourites.
</dd>
<dt>Margarita</dt>
<dd>A bigger jump, as we’re changing the souring agent this time too. Tequila, Cointreau and lime juice.
</dd>
<dt>Daiquiri</dt>
<dd>Rum, sugar syrup and lime juice.
</dd>
</dl>
<p>Anything involving citrus fruits or syrups is naturally open to variance. You might find you’ve got really sour lemons or really sweet syrup (particularly if you make it yourself — just sugar dissolved in hot water and allowed to cool). The proportions will have to adjust to suit, and to match your needs. (It wouldn’t be the first time the bottle has run out at the wrong moment…)</p>
<p>To recap — simple proportions of 4:2:1. Base, sweet, sour. Choose a famous cocktail or make a variation. Maybe you want to make a Sidecar with pear liqueur instead of Cointreau? A Daiquiri with elderflower cordial to sweeten? A Sidecar using bourbon instead of cognac? There’s always a new sensation to be discovered.</p>
<p>Now if you’ll excuse me, I’m off to use up that half-lemon that in the fridge…</p>]]></description>
    <pubDate>Sat, 16 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-03-16-rational-approach-to-mixing-your-drinks.html</guid>
</item>
<item>
    <title>Conor McBride at EdLambda: "Totally Live Coprogramming"</title>
    <link>http://dougalstanton.net/posts/2013-03-16-edlambda-conor-mcbride.html</link>
    <description><![CDATA[<p>I tried to get some people from work to come along to this because I knew it would be a totally different thing from what we normally do. Sadly, no takers. I wrote a brief summary via email as a follow-up to the invitation, which went something like this.</p>
<hr />
<p>The high-level summary:</p>
<ul>
<li>Programming is batch processing. Drop everything in the hopper and eventually it will be “done”; a result is produced. Examples: compiler (produces binary), print (produces hard copy), payroll calculation (produces error, never in your favour).</li>
<li>Coprogramming is a continuous “productive” process, always able to produce output. Examples: operating systems, servers, word processors. All software which interacts with the user and doesn’t “stop” until told.</li>
<li>All software which we write already fits these two definitions, but the division is never clear. It is easy to create a coprogram which halts (an error) or a program which doesn’t halt (another error). (Everything is a compiler or an interpreter.)</li>
<li>Total (co-)programming is about defining the dividing line and being honest when it is not clear that a result may be produced.</li>
<li>Future: Type safety — ensuring that programs only operate on values available <em>now</em> (data) and not on values which <em>might</em> be available in the future (codata).</li>
</ul>
<hr />
<p>So, to set the scene you can see the <a href="https://personal.cis.strath.ac.uk/conor.mcbride/pub/Hmm/EdLam.hs" title="Combined notes and Strathclyde-enhanced Haskell definitions">live programming script/notes/ Haskell module</a> which Conor used in his talk. We reached about part 5 (ignoring the <em>Gratuitous Dependent Types</em> interlude) before things just got a bit hairy for that late on a Tuesday evening. As usual there was a fair mix of people there, from people currently paid to research programming language to others who don’t know Haskell and were probably struggling with the syntax. (Not least because of <a href="https://personal.cis.strath.ac.uk/conor.mcbride/pub/she/" title="the Strathclyde Haskell Enhancement, a preprocessor for extra confusion">SHE</a>, a fancy preprocessor which provides access to an exciting wealth of alternate syntax for applicative functors, type-level data and more.) Two hours of talk about co-programming should be enough for anyone at that time of night, so we didn’t get on to part 6 though a couple of us spoke to Conor afterwards and he told us briefly what it is about.</p>
<p>I’ll go through the sections and see what I can remember that was interesting/useful. I advise <a href="https://personal.cis.strath.ac.uk/conor.mcbride/pub/Hmm/EdLam.hs" title="Combined notes and Strathclyde-enhanced Haskell definitions">opening the script in an adjacent window</a> so you can read the definitions and follow along as I go.</p>
<p>In <strong>part 1</strong> we defined infinite streams, data structures which are similar to a list (head + tail) but have no <code>nil</code> value to mark the end. This was used to introduce the idea of “productive” systems, which can always provide “another value” once you remove the top item from the list.</p>
<p>As with all things there is a discipline to using streams, and co-data in general. With data you destruct one item at a time, recursively processing the data until it’s all done. With codata you construct layers corecursively. The corecursive call is not guaranteed to end but it <em>can</em>.</p>
<p>Having defined a stream “manually” we move on to a generalised approach to producing streams which requires that we pass in a generator function which creates the next value in the stream from the current seed. Given a function which produces a value the stream will continue to produce (though no guarantees are made that it will produce the anything useful).</p>
<p>This is total corecursion; the data production will not fail from the unfolding nature of the stream. In <strong>part 2</strong> we use this power to demonstrate general recursion. Assuming an infinite stream of values, we can hunt through them until one meets our desired criteria. A corecursive stream of <a href="http://mathworld.wolfram.com/CollatzProblem.html" title="Collatz Problem, which may be undecidable">“hailstone numbers” for the Collatz problem</a> can be examined until the first 1 is found. For a given starting point we can never tell if the program will halt.</p>
<p>In <strong>part 3</strong> the corecursive structure is laid out in full generality, being some combination of “a value” and “further structure”. The fixpoint data type <code>Nu f = In (f (Nu f))</code> takes some structure <code>f</code> which may hold its own data and further nested data of type <code>Nu f</code>. (See also the fixpoint operation for functions, <code>fix f = f (fix f)</code> which may terminate depending on the definition of <code>f</code>, ie whether it always evaluates the first argument, the recursive call to <code>(fix f)</code>.)</p>
<p>The definition <code>ana</code> (anamorphism) is another generalisation, an unfold for all codata, which similarly takes a seed and a generator function and produces (possibly) infinite codata. Again the Collatz problem is demonstrated with the more general foundation of the fixpoint codatatype generation.</p>
<p>As mentioned, <strong>gratuitous dependent types</strong> wasn’t mentioned in detail though the <a href="http://en.wikipedia.org/wiki/Stern%E2%80%93Brocot_tree" title="the infinite Stern-Brocot tree of rationals">Stern–Brocot tree was generated</a> to a few levels to show how the anamorphism can be used to create non-linear shapes.</p>
<p>To break away from the very mathematical discussion of the fixpoints and the enumeration of all rationals, <strong>part 4</strong> demonstrates co-recursion in a simple chat program, bringing in IO and user interaction (in case you thought it was the kind of thing functional programming shied away from). The operation is quite straightforward but at the definition of <code>chain</code> it is possible to lock up the system by not being “fair”. (Alice can monopolise the system and Silent Bob never won’t do anything.)</p>
<p>The definition of <code>fchain</code> somehow rectifies this problem though I can’t quite see how it would do so — the differences I can see are that the <code>Say</code>/<code>TSay</code> constructors are subtly different,</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Chat</span> x <span class="fu">=</span> <span class="dt">Say</span>  <span class="dt">String</span> x        <span class="fu">|</span> <span class="fu">...</span>
<span class="kw">data</span> <span class="dt">Turn</span> x <span class="fu">=</span> <span class="dt">TSay</span> <span class="dt">String</span> (<span class="dt">Turn</span> x) <span class="fu">|</span> <span class="fu">...</span></code></pre>
<p>and that <code>fchain</code> uses an anamorphism to construct the chained conversation instead of manual recursive calls. Hmm, on further reflection I wonder if the important detail is that with this new definition of <code>Turn</code> and <code>fchain</code> it is not possible to define <code>gobbyAlice</code> and <code>silentBob</code> because they are not allowed to call themselves? They must always result in a fresh start which can be interrupted by another listener/speaker.</p>
<p>Having seen that it is possible to create infinitely productive streams of codata and that we can deal with them in a safe manner, in <strong>part 5</strong> we see how it is easy to start treating codata <em>unsafely</em>. The definition of <code>nats</code> is productive but <code>naats</code> (using a <code>map</code>-style function that treats two values at a time) will hang:</p>
<pre><code>nats = 0 :&gt; fmap (1+) nats
     { where fmap f (s:&gt;ss) = f s :&gt; fmap f ss 
       and   (n :&gt; ats) = nats }
     = 0 :&gt; (1+) n :&gt; fmap (1+) ats
     { where (n :&gt; ats) = (0 :&gt; ats) }
     = 0 :&gt; (1 + 0) :&gt; fmap (1+) ats
     = 0 :&gt; 1 :&gt; fmap (1+) ats

naats = 0 :&gt; maap (1+) naats
      { maap f (x :&gt; y :&gt; zs) = f x :&gt; f y :&gt; maap f zs }
      = 0 :&gt; !!! can&#39;t match
                 0 :&gt; _
             and
                 x :&gt; y :&gt; _
             not enough values !!!</code></pre>
<p>We still have to be careful; it’s easy to move from safe to unsafe if we rely on calculating with codata that doesn’t (or may never) exist.</p>
<p>The type system should help us here, by enforcing constraints about what data is safe to consume now and what must be kept until later.</p>
<p>I’m going to stop here for now, because this is basically the point at which Conor stopped. The rest of the document I will read carefully and maybe attempt to tease something useful out at a later date.</p>]]></description>
    <pubDate>Sat, 16 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-03-16-edlambda-conor-mcbride.html</guid>
</item>

    </channel> 
</rss>
