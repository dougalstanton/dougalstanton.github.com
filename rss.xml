<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Looking Out To Sea</title>
        <link>http://dougalstanton.net</link>
        <description><![CDATA[A blog of sorts, unsorted.]]></description>
        <atom:link href="http://dougalstanton.net/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sat, 16 Mar 2013 00:00:00 UT</lastBuildDate>
        <item>
    <title>Conor McBride at EdLambda: "Totally Live Coprogramming"</title>
    <link>http://dougalstanton.net/posts/2013-03-16-edlambda-conor-mcbride.html</link>
    <description><![CDATA[<p>I tried to get some people from work to come along to this because I knew it would be a totally different thing from what we normally do. Sadly, no takers. I wrote a brief summary via email as a follow-up to the invitation, which went something like this.</p>
<hr />
<p>The high-level summary:</p>
<ul>
<li>Programming is batch processing. Drop everything in the hopper and eventually it will be “done”; a result is produced. Examples: compiler (produces binary), print (produces hard copy), payroll calculation (produces error, never in your favour).</li>
<li>Coprogramming is a continuous “productive” process, always able to produce output. Examples: operating systems, servers, word processors. All software which interacts with the user and doesn’t “stop” until told.</li>
<li>All software which we write already fits these two definitions, but the division is never clear. It is easy to create a coprogram which halts (an error) or a program which doesn’t halt (another error). (Everything is a compiler or an interpreter.)</li>
<li>Total (co-)programming is about defining the dividing line and being honest when it is not clear that a result may be produced.</li>
<li>Future: Type safety — ensuring that programs only operate on values available <em>now</em> (data) and not on values which <em>might</em> be available in the future (codata).</li>
</ul>
<hr />
<p>So, to set the scene you can see the <a href="https://personal.cis.strath.ac.uk/conor.mcbride/pub/Hmm/EdLam.hs" title="Combined notes and Strathclyde-enhanced Haskell definitions">live programming script/notes/ Haskell module</a> which Conor used in his talk. We reached about part 5 (ignoring the <em>Gratuitous Dependent Types</em> interlude) before things just got a bit hairy for that late on a Tuesday evening. As usual there was a fair mix of people there, from people currently paid to research programming language to others who don’t know Haskell and were probably struggling with the syntax. (Not least because of <a href="https://personal.cis.strath.ac.uk/conor.mcbride/pub/she/" title="the Strathclyde Haskell Enhancement, a preprocessor for extra confusion">SHE</a>, a fancy preprocessor which provides access to an exciting wealth of alternate syntax for applicative functors, type-level data and more.) Two hours of talk about co-programming should be enough for anyone at that time of night, so we didn’t get on to part 6 though a couple of us spoke to Conor afterwards and he told us briefly what it is about.</p>
<p>I’ll go through the sections and see what I can remember that was interesting/useful. I advise <a href="https://personal.cis.strath.ac.uk/conor.mcbride/pub/Hmm/EdLam.hs" title="Combined notes and Strathclyde-enhanced Haskell definitions">opening the script in an adjacent window</a> so you can read the definitions and follow along as I go.</p>
<p>In <strong>part 1</strong> we defined infinite streams, data structures which are similar to a list (head + tail) but have no <code>nil</code> value to mark the end. This was used to introduce the idea of “productive” systems, which can always provide “another value” once you remove the top item from the list.</p>
<p>As with all things there is a discipline to using streams, and co-data in general. With data you destruct one item at a time, recursively processing the data until it’s all done. With codata you construct layers corecursively. The corecursive call is not guaranteed to end but it <em>can</em>.</p>
<p>Having defined a stream “manually” we move on to a generalised approach to producing streams which requires that we pass in a generator function which creates the next value in the stream from the current seed. Given a function which produces a value the stream will continue to produce (though no guarantees are made that it will produce the anything useful).</p>
<p>This is total corecursion; the data production will not fail from the unfolding nature of the stream. In <strong>part 2</strong> we use this power to demonstrate general recursion. Assuming an infinite stream of values, we can hunt through them until one meets our desired criteria. A corecursive stream of <a href="http://mathworld.wolfram.com/CollatzProblem.html" title="Collatz Problem, which may be undecidable">“hailstone numbers” for the Collatz problem</a> can be examined until the first 1 is found. For a given starting point we can never tell if the program will halt.</p>
<p>In <strong>part 3</strong> the corecursive structure is laid out in full generality, being some combination of “a value” and “further structure”. The fixpoint data type <code>Nu f = In (f (Nu f))</code> takes some structure <code>f</code> which may hold its own data and further nested data of type <code>Nu f</code>. (See also the fixpoint operation for functions, <code>fix f = f (fix f)</code> which may terminate depending on the definition of <code>f</code>, ie whether it always evaluates the first argument, the recursive call to <code>(fix f)</code>.)</p>
<p>The definition <code>ana</code> (anamorphism) is another generalisation, an unfold for all codata, which similarly takes a seed and a generator function and produces (possibly) infinite codata. Again the Collatz problem is demonstrated with the more general foundation of the fixpoint codatatype generation.</p>
<p>As mentioned, <strong>gratuitous dependent types</strong> wasn’t mentioned in detail though the <a href="http://en.wikipedia.org/wiki/Stern%E2%80%93Brocot_tree" title="the infinite Stern-Brocot tree of rationals">Stern–Brocot tree was generated</a> to a few levels to show how the anamorphism can be used to create non-linear shapes.</p>
<p>To break away from the very mathematical discussion of the fixpoints and the enumeration of all rationals, <strong>part 4</strong> demonstrates co-recursion in a simple chat program, bringing in IO and user interaction (in case you thought it was the kind of thing functional programming shied away from). The operation is quite straightforward but at the definition of <code>chain</code> it is possible to lock up the system by not being “fair”. (Alice can monopolise the system and Silent Bob never won’t do anything.)</p>
<p>The definition of <code>fchain</code> somehow rectifies this problem though I can’t quite see how it would do so — the differences I can see are that the <code>Say</code>/<code>TSay</code> constructors are subtly different,</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Chat</span> x <span class="fu">=</span> <span class="dt">Say</span>  <span class="dt">String</span> x        <span class="fu">|</span> <span class="fu">...</span>
<span class="kw">data</span> <span class="dt">Turn</span> x <span class="fu">=</span> <span class="dt">TSay</span> <span class="dt">String</span> (<span class="dt">Turn</span> x) <span class="fu">|</span> <span class="fu">...</span></code></pre>
<p>and that <code>fchain</code> uses an anamorphism to construct the chained conversation instead of manual recursive calls. Hmm, on further reflection I wonder if the important detail is that with this new definition of <code>Turn</code> and <code>fchain</code> it is not possible to define <code>gobbyAlice</code> and <code>silentBob</code> because they are not allowed to call themselves? They must always result in a fresh start which can be interrupted by another listener/speaker.</p>
<p>Having seen that it is possible to create infinitely productive streams of codata and that we can deal with them in a safe manner, in <strong>part 5</strong> we see how it is easy to start treating codata <em>unsafely</em>. The definition of <code>nats</code> is productive but <code>naats</code> (using a <code>map</code>-style function that treats two values at a time) will hang:</p>
<pre><code>nats = 0 :&gt; fmap (1+) nats
     { where fmap f (s:&gt;ss) = f s :&gt; fmap f ss 
       and   (n :&gt; ats) = nats }
     = 0 :&gt; (1+) n :&gt; fmap (1+) ats
     { where (n :&gt; ats) = (0 :&gt; ats) }
     = 0 :&gt; (1 + 0) :&gt; fmap (1+) ats
     = 0 :&gt; 1 :&gt; fmap (1+) ats

naats = 0 :&gt; maap (1+) naats
      { maap f (x :&gt; y :&gt; zs) = f x :&gt; f y :&gt; maap f zs }
      = 0 :&gt; !!! can&#39;t match
                 0 :&gt; _
             and
                 x :&gt; y :&gt; _
             not enough values !!!</code></pre>
<p>We still have to be careful; it’s easy to move from safe to unsafe if we rely on calculating with codata that doesn’t (or may never) exist.</p>
<p>The type system should help us here, by enforcing constraints about what data is safe to consume now and what must be kept until later.</p>
<p>I’m going to stop here for now, because this is basically the point at which Conor stopped. The rest of the document I will read carefully and maybe attempt to tease something useful out at a later date.</p>]]></description>
    <pubDate>Sat, 16 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-03-16-edlambda-conor-mcbride.html</guid>
</item>
<item>
    <title>Sending customised HTML documents to a Kindle</title>
    <link>http://dougalstanton.net/posts/2013-03-13-send-to-kindle-customised.html</link>
    <description><![CDATA[<p>I’ve been experimenting with the most effective way to send documents to the Kindle and have them turn up formatted in the correct fashion. It’s possible to email a document (HTML, MS Word, PDF and others) to a special address registered with your Kindle and Amazon will do the conversion and send the doc straight to your device.</p>
<p>The sticking points that I wanted to overcome were</p>
<ul>
<li>Missing metadata. I want the proper title and author to appear on my Kindle.</li>
<li>Missing document! Sometimes when I use the <em>Send To Kindle</em> tools it chooses an arbitrary subsection of the document and cuts off the rest, so I get the first half or the second half instead of it all.</li>
<li>Cleanliness. Some parts of a document can be done away with and I don’t really care. When I’m reading on the train I don’t need a big list of references to journal articles I’ll never be able to find. It would be nice to just cut this stuff out.</li>
</ul>
<p>Using a <a href="http://okmij.org/ftp/ML/generalization.html" title="How OCaml type checker works -- or what polymorphism and garbage collection have in common">recent article published by Oleg Kiselyov</a> as a test specimen, I tried a few approaches. The first thing to do was cleanup:</p>
<pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">wget</span> http://okmij.org/ftp/ML/generalization.html
$ <span class="kw">pandoc</span> -i generalization.html -o original.markdown</code></pre>
<p>In Markdown format the document has lost none of the content but it’s much easier to read and edit, and so clean. You can remove the bits you don’t want (like navigation bars). Next you should add a title block at the very top:</p>
<pre><code>% Efficient and Insightful Generalization
% Oleg Kiselyov
% February 2013</code></pre>
<p>At this stage I tried producing an HTML document but the metadata (embedded as <code>meta</code> and <code>title</code> tags) were being ignored in the conversion process.</p>
<p>Next I tried EPub format in the hope it would be more faithfully converted:</p>
<pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">pandoc</span> -S -i original.markdown -o final.epub</code></pre>
<p>But despite what I had read on <em>some website somewhere</em>, Amazon won’t do EPub conversion for you. :-(</p>
<p>Next attempt, using Calibre, a graphical ebook manager that comes with a suite of command line support tools. The tool <code>ebook-convert</code> is as straightforward to use as PanDoc — it guesses everything you would need to tell it from the filename:</p>
<pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">ebook-convert</span> final.epub final.mobi</code></pre>
<p>This time the result was perfect, with title and author as I’d defined them, and even a “book cover” for free. This tool can also read other formats; it will be interesting to see what I can get with a combination of PanDoc and Ebook Convert when formatting PDFs for the Kindle. Watch this space.</p>]]></description>
    <pubDate>Wed, 13 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-03-13-send-to-kindle-customised.html</guid>
</item>
<item>
    <title>Converting from Darcs to Git no longer so easy</title>
    <link>http://dougalstanton.net/posts/2013-03-10-converting-from-darcs-to-git.html</link>
    <description><![CDATA[<p>I am trying to convert all of my Darcs repositories to Git repositories so I can upload them to <a href="http://github.com/dougalstanton" title="My GitHub repository">GitHub</a> to provide a simple form of backup and a location to publish anything interesting. Although to be fair I don’t think I have any projects which count as “interesting”. Any which were previously of value have bit-rotted or in some way become less useful. I guess I also have a lot of private-use tools which other people will not find useful.</p>
<p>The tool which used to do the job, <code>darcs-fastconvert</code>, hasn’t been updated in a couple of years while Darcs has had some significant internal restructuring. I can not compile <code>darcs-fastconvert</code> against a recent Darcs and I don’t have the familiarity with the code to fix things. I got so far by correcting the import statements from functions which had migrated to different modules, but when the data constructors and type-level constraints started to kick in the error messages became too difficult. I am no longer sure whether these are inherent problems or the effect of me changing the wrong thing.</p>
<p>Either way, I hope to get them converted soon and maybe pick up some of the projects again.</p>]]></description>
    <pubDate>Sun, 10 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-03-10-converting-from-darcs-to-git.html</guid>
</item>
<item>
    <title>The unreasonable effectiveness of programming to Get Stuff Done&trade;</title>
    <link>http://dougalstanton.net/posts/2013-03-08-unreasonable-effectiveness-of-code.html</link>
    <description><![CDATA[<p>I’m not going to try convincing you of anything here, but instead to lay out the facts of what just happened.</p>
<p>I have a list of “readers’ favourite books” that was the result of a popular vote a few years ago (in the Guardian I think, though that doesn’t matter at this point).</p>
<p>I was also given a list of books for Kindle that someone at work had access to, by means which we shall not explore in detail. <em>wink</em></p>
<p>I thought, I wonder how many of the favourite books are available? One list looked like this:</p>
<pre><code>1 Pride and Prejudice Jane Austen
2 The Lord of the Rings JRR Tolkien
3 Jane Eyre Charlotte Bronte
4 Harry Potter series JK Rowling
5 To Kill a Mockingbird Harper Lee
...</code></pre>
<p>and the other looked like this:</p>
<pre><code>Abagnale, Frank W. - Catch Me If You Can.mobi
Abbot, Edwin - Flatland.mobi
Abercrombie, Joe - First Law 01 - The Blade Itself.mobi
Abercrombie, Joe - First Law 02 - Before They Are Hanged.mobi
Abercrombie, Joe - First Law 03 - Last Argument of Kings.mobi
...</code></pre>
<p>A few minutes later I had a good answer on my screen. I won’t go into the details because they’re neither interesting or relevant. (I took the last word from the first list, which was the author’s surname, and searched for it in the other list. Any book which produced no candidates was dropped entirely. The rest were printed.) The point is that I had the means and the ability to very quickly answer the following question:</p>
<blockquote>
<p>Out of this list of 100 books and this list of 1400 books, which ones match up?</p>
</blockquote>
<p>The results were by no means perfect (this sample below shows the fuzzy nature of the output) but they were good enough to eyeball and say “yep, the book is there” or not.</p>
<pre><code>5 To Kill a Mockingbird Harper Lee
   Child, Lee - Jack Reacher 01 - Killing Floor.mobi
   Child, Lee - Jack Reacher 02 - Die Trying.mobi
   Child, Lee - Jack Reacher 03 - Tripwire.mobi
   Child, Lee - Jack Reacher 04 - Running Blind.mobi
   Child, Lee - Jack Reacher 05 - Echo Burning.mobi
   Child, Lee - Jack Reacher 06 - Without Fail.mobi
   Child, Lee - Jack Reacher 07 - Persuader.mobi
   Child, Lee - Jack Reacher 08 - The Enemy.mobi
   Child, Lee - Jack Reacher 09 - One Shot.mobi
   Child, Lee - Jack Reacher 10 - The Hard Way.mobi
   Child, Lee - Jack Reacher 11 - Bad Luck and Trouble.mobi
   Child, Lee - Jack Reacher 12 - Nothing to Lose.mobi
   Child, Lee - Jack Reacher 13 - Gone Tomorrow.mobi
   Child, Lee - Jack Reacher 14 - 61 Hours.mobi
   Child, Lee - Jack Reacher 15 - Worth Dying For.azw
   Hunter, Stephen - Bob Lee Swagger 01 - Point Of Impact.mobi
   Lee, Harper - To Kill a Mockingbird.mobi
6 The Bible
   Kingsolver, Barbara - The Poisonwood Bible.mobi
7 Wuthering Heights Emily Bronte
   Bronte, Charlotte - Jane Eyre.mobi
=8 Nineteen Eighty-Four George Orwell
   Orwell, George - 1984.mobi
   Orwell, George - Animal Farm.mobi
=8 His Dark Materials Philip Pullman
   Pullman, Philip - His Dark Materials 01 - The Golden Compass.mobi
   Pullman, Philip - His Dark Materials 02 - The Subtle Knife.mobi
   Pullman, Philip - His Dark Materials 03 - The Amber Spyglass.mobi</code></pre>
<p>This is why programming ability will one day become an important skill for living in a technological society. It may not be as fundamental as reading and writing, but few things are. Driving a car, wiring a plug, painting a fence — all things further down the scale but still considered by many as “life skills”. Unless there is a powerful change in the way computers can be made to understand our desires in the next few years then I think “simple scripting” will also fall into that category.</p>]]></description>
    <pubDate>Fri, 08 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-03-08-unreasonable-effectiveness-of-code.html</guid>
</item>
<item>
    <title>Another blog rewrite, because the first one was so much fun</title>
    <link>http://dougalstanton.net/posts/2013-03-07-another-blog-rewrite.html</link>
    <description><![CDATA[<p>Less than a month ago I set up this blog with <a href="http://octopress.org" title="Octopress, static blogging tool written in Ruby">Octopress</a>. I was inspired by <a href="http://harveynick.com/blog/2012/03/17/new-ish-year-new-ish-blog/" title="Dr Nick&#39;s blog, also using Octopress">Nick’s move in that direction</a>.</p>
<p>I suffered a great deal trying to get Ruby installed with the correct versions but in the end I managed it. I was impressed with how nice blogging could be when stripped down to the basics. I’ve been writing my posts with Markdown formatting for years — it’s nice that the rest of the blogging world has caught up. :-)</p>
<p>I was looking forward to blogging more, but the next time I tried to update my blog something had gone very wrong. The versions of various parts of the system had got out of sync and I couldn’t update any more.</p>
<p>At this point plan B kicked into play and I started looking at another tool for generating static blogs, <a href="http://jaspervdj.be/hakyll/" title="Hakyll, static blogging tool/library written in Haskell">Hakyll</a>. It had one thing going strongly in its favour — it was written in Haskell which I understand rather than Ruby which I haven’t taken the time to study. But this familiarity was necessary because Hakyll is not a plug-n-play system. It’s more of a library suite for putting together your own static blog generator. (See Xmonad for the same story with tiling window managers.)</p>
<p>So I’ve been quiet on the blogging front in order to get this blog running in the background. I also had to come up with some style (sorry about that), which I have borrowed from various places. But as someone once said, “as long as you don’t leave any fingerprints at the scene of the crime”…</p>]]></description>
    <pubDate>Thu, 07 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-03-07-another-blog-rewrite.html</guid>
</item>
<item>
    <title>Travelling to Edinburgh with delicate foodstuffs</title>
    <link>http://dougalstanton.net/posts/2013-03-02-travelling-to-edinburgh-with-delicate-foodstuffs.html</link>
    <description><![CDATA[<p>For our (approximately) monthly (kind of) book group we visit everyone’s flat in rotation and we’re the only people who don’t live in Edinburgh but still attend, so we do a lot of travelling to Edinburgh.</p>
<p>The Glasgow underground trains stop at about 6.30pm on a Sunday so we generally take our bikes at least some of the distance so we can cycle back to the flat when we get back to Glasgow Queen Street station.</p>
<p>So we have to come up with food which travels well, and can cope with being beaten a bit on the back of a bike. But no! Tomorrow we’re going to try a new trick. First we cycle to the train station (which handily has both subway and intercity train services) and get the underground back to the flat, with a return ticket. Then we take the food, carefully, on the underground back out to the station and go to Edinburgh.</p>
<p>When we return in the evening we will have only empty dishes and can hop on the bikes heading home. It’s a bit of extra to-ing and fro-ing but I suspect it will work admirably.</p>]]></description>
    <pubDate>Sat, 02 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-03-02-travelling-to-edinburgh-with-delicate-foodstuffs.html</guid>
</item>
<item>
    <title>Avoid the Eclipse "managed build" trap at all costs</title>
    <link>http://dougalstanton.net/posts/2013-03-01-avoid-the-eclipse-build-trap.html</link>
    <description><![CDATA[<p>I implore you, if you want any kind of future-proofing of your development system <em>do not</em> resort to using the Eclipse “managed build” setup. At first it might seem the obvious step, to get your IDE to deal with what should and shouldn’t be included in your final product, because you’re already working in there, right?</p>
<p>And then you discover that you can’t really debug how it builds your binaries. You get inscrutable “internal failure” messages with nothing more to go on. There is no extra level of debug, no graph of dependencies to illustrate what is happening.</p>
<p>If you want to run a continuous integration server — and you do, don’t you? — you’ll notice that “headless Eclipse” is a monstrosity that shouldn’t have been let loose by right-thinking people. Have you read any HP Lovecraft, by any chance?</p>
<p>In short, you have no control over what happens to your build any more. You press the little button in the GUI and hope it makes the right decisions. In my experience, that seems quite naive.</p>]]></description>
    <pubDate>Fri, 01 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-03-01-avoid-the-eclipse-build-trap.html</guid>
</item>
<item>
    <title>Octopress uses a non-conformant Markdown processor as standard</title>
    <link>http://dougalstanton.net/posts/2013-02-22-non-conformant-markdown-processor.html</link>
    <description><![CDATA[<p>I have just discovered, while adding an <a href="/about.html">about page</a> to this blog, that the standard Markdown processor used by Octopress (called RDiscount) doesn’t conform to the Markdown standard. I mean in particular the reference-style links, which I happen to be quite fond of. You should be able to include <code>&lt;</code> and <code>&gt;</code> characters around URLs like so:</p>
<pre><code>[eg]: &lt;http://www.example.com&gt; &quot;The canonical example page&quot;</code></pre>
<p>Instead of stripping out these optional characters RDiscount passes them on and they get translated into HTML entities (<code>&amp;lt;</code>) which causes further steps in the chain to choke. Ultimately you end up with a very broken web page.</p>
<p>A simple <code>An [example link] [eg]</code> turns into the following mess — oh dear.</p>
<pre class="sourceCode xml"><code class="sourceCode xml"><span class="kw">&lt;p&gt;</span>An <span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;</span><span class="dv">&amp;lt;</span><span class="st">http://www.example.com&gt;</span><span class="dv">&amp;#8221;</span><span class="st"> </span>
<span class="st">         title=</span><span class="dv">&amp;#8221;</span><span class="st">The canonical example page</span><span class="dv">&amp;#8221;</span><span class="st">&gt;example link</span><span class="er">&lt;</span><span class="st">/a&gt;.</span><span class="er">&lt;</span><span class="st">/p&gt;</span></code></pre>
<p>Notice how the opening quote never gets closed? The rest of that paragraph is the <code>href</code> for that link! So I will have to learn to omit the angle brackets:</p>
<pre><code>[eg]: http://www.example.com &quot;The canonical example page&quot;</code></pre>
<p>PS. While writing <em>this</em> post I discovered that Pygments.rb (which does syntax highlighting for Octopress) doesn’t support Markdown as a highlightable language (fair enough, can’t cover everything) — but also that it crashes if you name a language it doesn’t know. Not having a good day.</p>
<pre><code> ``` markdown I will kill your highlighter
 [eg]: &lt;http://www.example.com&gt; &quot;The canonical example page&quot;
 ```</code></pre>]]></description>
    <pubDate>Fri, 22 Feb 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-02-22-non-conformant-markdown-processor.html</guid>
</item>
<item>
    <title>Home-brew static analysis for fun and profit</title>
    <link>http://dougalstanton.net/posts/2013-02-19-home-brew-static-analysis.html</link>
    <description><![CDATA[<p>I’ve had recent success with writing test tools for use in-house. We have a system which greatly abuses the C preprocessor to create (at build-time) sets of translations and default settings for different languages and particular customers.</p>
<p>Due to the limitations of anything built with the preprocessor there isn’t anything even remotely like type checking. In order to truly spot any problems in the translations you have to build the binary (and potentially even <em>run</em> it). Which means we need a single binary which includes every single customer variant and linguistic complexity, which will take an age to build; or we have to build have a dozen variants to ensure that adding one thing doesn’t cause mayhem.</p>
<p>And as mentioned, building it doesn’t really go all the way. If the possible values for a timer are between 5 and 300 there’s no way the compiler can spot that 405 or 2 are invalid. All it can check is that the <code>int</code> you’ve provided will happily compile when inserted into an array of <code>int</code>.</p>
<p>Thankfully most of these checks can be done easily and quickly — very quickly — without even compiling. The unprocessed file has some hints to translators to indicate what are valid sizes for strings, ranges for numbers and descriptions of the text. Parsing this meta-data alongside the translations gives us all the information we need to perform these checks without compiling anything.</p>
<p>Once the necessary data is parsed and the remainder discarded we can get to the interesting work. Thankfully I started this work during a period of intense development on menu strings and default options, so the translation file was suffering a lot of abuse. Finding candidate tests was as easy as looking at the most recent reasons for fixing the file.</p>
<p>Initially I ran all tests in parallel, gathering results as they went and discarding the used data. (A single pass is definitely beneficial when you’ve just loaded in ~100,000 lines.) This was considerably faster than running one pass for each test. The result was printed to standard out almost instantly, which was gratifying when it passed and even better when it spotted a legitimate failure.</p>
<p>But I was tempted by the option in the Jenkins CI server to pick up JUnit-style XML files and create comparison graphs of successive runs. I could have graphs of my successful tests, for free! All I would have to do is write some XML in an undocumented format, which no longer felt so appealing.</p>
<p>Thankfully a test runner called Test Framework came to the rescue, promising to write the XML for me. I converted the format and results of my tests into some structure it could understand and let it do the hard work. I got prettier command line output and XML files that Jenkins could parse, but lost one-pass testing. I can live with this; the tests still run in about six seconds which is a considerable saving on a twenty minute build.</p>]]></description>
    <pubDate>Tue, 19 Feb 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-02-19-home-brew-static-analysis.html</guid>
</item>
<item>
    <title>Five minutes everyday to turn the world upside down</title>
    <link>http://dougalstanton.net/posts/2013-02-18-five-minutes-everyday.html</link>
    <description><![CDATA[<p>I’ve been doing capoeira now for about two years I think, and one thing that hasn’t really changed in that time is my complete inability to do a handstand or a cartwheel.</p>
<p>Since the beginning of the year (you know, midway through January) I’ve had an alarm on my phone that buzzes at 6.30pm <em>every single day</em> and tells me I have to practise. Nearly every single day since I started I have set aside five minutes to practise. I set a timer so that I don’t do 3 minutes then decide that I’m probably done, and so that I stop at 5 minutes. The point is that it’s not supposed to be a burden or a long gruelling exercise regime.</p>
<p>Five minutes practice every day — throwing myself up against a bare wall initially, but slowly becoming more independent — has brought about a massive change. I’m still not capable of busting out amazing inverted moves but if I’d known two years ago that I could be where I am now with only month of this I would be shocked.</p>
<p>I’ll continue to be shocked and I hope the improvements will continue too.</p>]]></description>
    <pubDate>Mon, 18 Feb 2013 00:00:00 UT</pubDate>
    <guid>http://dougalstanton.net/posts/2013-02-18-five-minutes-everyday.html</guid>
</item>

    </channel> 
</rss>
