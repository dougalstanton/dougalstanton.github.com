<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Looking Out To Sea</title>
    <link href="http://dougalstanton.net/atom.xml" rel="self" />
    <link href="http://dougalstanton.net" />
    <id>http://dougalstanton.net/atom.xml</id>
    <author>
        <name>Dougal Stanton</name>
        <email>blog@dougalstanton.net</email>
    </author>
    <updated>2014-01-28T00:00:00Z</updated>
    <entry>
    <title>Write code to write posts to write code</title>
    <link href="http://dougalstanton.net/posts/2014-01-28-write-code-to-write-posts-to-write-code.html" />
    <id>http://dougalstanton.net/posts/2014-01-28-write-code-to-write-posts-to-write-code.html</id>
    <published>2014-01-28T00:00:00Z</published>
    <updated>2014-01-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>There is a belief among certain programmers that if you’re having a problem with your code you should sit someone down and talk them through it — and that during the explanation your problem will become apparent to you. The very act of organising your thoughts enough to verbalise them will bring the issue to light.</p>
<p>Some people take this to an extreme and believe that since the listener doesn’t need to be an active participant (they don’t need to prompt you or seek clarification, just listen) they don’t even need to be there at all. Or at least, they don’t need to be an actual person. And so was born <a href="http://en.wikipedia.org/wiki/Rubber_duck_debugging" title="Rubber duck debugging, defined by Wikipedia">rubber ducking</a> — the process of solving your problems by explaining them to a rubber duck. Now don’t anyone ever tell me that programmers have a problem talking to others!</p>
<p>I mention this because writing about programming is a similarly intense way of making you really think through the code. But instead of making you solve your problems it brings you face to face with the ugliness of your code. In the past if I’ve been blogging about code I end up making little “cosmetic edits” after I’ve pasted code snippets into my document. As the edits get bolder the chance of introducing an inconsistency or a flaw into the code becomes higher. Before you know it you’re writing about beautiful but buggy code.</p>
<p>The only way to stop this from happening is by making sure that the changes made to the code are compiled after every edit. For my last post about using QuickCheck with C and C++ I spent a fair amount of time writing an extra bit of function for the blogging software to include the source into post “by reference”:</p>
<pre><code>```{.cpp include=&quot;path/to/file&quot;}
```</code></pre>
<p>Hakyll doesn’t do this as standard but luckily PanDoc (which is used for format conversion under the hood) is programmable and even includes this very example in the tutorial.</p>
<p>This left me with another problem, which is that I needed to “compile” the page in order to preview it at all. So I ended up making more changes to compile draft documents and keep them separate from real blog posts. Basically I ended up doing a <em>lot</em> of faffing to write that last post.</p>
<p>And after all that I still feel the urge to paste in the code that I used to do it. But then I’d inevitably want to fiddle, and so we end up where we started.</p>]]></summary>
</entry>
<entry>
    <title>Testing embedded C++ with Haskell QuickCheck</title>
    <link href="http://dougalstanton.net/posts/2014-01-25-quickcheck-tests-for-c-cpp-code.html" />
    <id>http://dougalstanton.net/posts/2014-01-25-quickcheck-tests-for-c-cpp-code.html</id>
    <published>2014-01-25T00:00:00Z</published>
    <updated>2014-01-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>If you work with C or C++ and are hankering after the testing power of <a href="http://hackage.haskell.org/package/QuickCheck" title="A library for random testing of program properties">QuickCheck for property tests</a>, this is your lucky day.</p>
<p>If you’ve got C++ code you have to bear a couple of things in mind. If it’s vanilla C then you’re okay.</p>
<ul>
<li>The code under test needs to be C-compatible, so using <code>extern C</code> otherwise the name mangler will prevent your linker from finding the correct symbols.</li>
<li>You have to manage the compilation steps manually or using an ordinary Makefile. The CABAL system doesn’t recognise <code>.cpp</code> files so won’t process them properly on its own.</li>
</ul>
<p>These are not grave restrictions by any means. This is how it’s done. First, we will see the files we have to start with. These are the ones which we have to write and cannot be autogenerated:</p>
<ul>
<li>foo.cpp</li>
<li>foo.h</li>
<li>Foo.hsc</li>
<li>Main.hs</li>
</ul>
<p>The first two comprise your “system under test”. The next two are the Haskell/C bridge file which handles marshalling and the Haskell test executable. As your system gets more complex you might obviously add to these.</p>
<p>I will work through this list of files in order, showing what they contain and how they can be used to generate further dependencies until the test system is complete.</p>
<h3 id="some-code-to-test">Some code to test</h3>
<p>First we have the C++ code we’re testing. I’m going to use the example of data transfer over a network. We’ve got some data structure which we need to transmit or receive. A simple way of testing whether we are internally consistent is making sure we can always decode the same data we encoded. This is the “round trip” test.</p>
<p><math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="monospace">id</mtext><mo>=</mo><mtext mathvariant="monospace">deserialise</mtext><mo>⋅</mo><mtext mathvariant="monospace">serialise</mtext></mrow></math></p>
<p>So <code>foo.cpp</code> contains a simple struct and a pair of functions that should operate as a “round trip”, serialising and then deserialising the input.</p>
<pre class="sourceCode cpp" include="includes/ffi-intro/foo.cpp"><code class="sourceCode cpp"><span class="ot">#include &quot;foo.h&quot;</span>

size_t serialise (<span class="dt">const</span> <span class="kw">struct</span> foo * in, <span class="dt">uint8_t</span> * out)
{
    out[<span class="dv">0</span>] = in-&gt;bar &amp; <span class="bn">0x000000ff</span>;
    out[<span class="dv">1</span>] = (in-&gt;bar &amp; <span class="bn">0x0000ff00</span>) &gt;&gt; <span class="dv">8</span>;
    out[<span class="dv">2</span>] = (in-&gt;bar &amp; <span class="bn">0x00ff0000</span>) &gt;&gt; <span class="dv">16</span>;
    out[<span class="dv">3</span>] = (in-&gt;bar &amp; <span class="bn">0xff000000</span>) &gt;&gt; <span class="dv">24</span>;
    out[<span class="dv">4</span>] = in-&gt;baz;
    out[<span class="dv">5</span>] = in-&gt;quux[<span class="dv">0</span>];
    out[<span class="dv">6</span>] = in-&gt;quux[<span class="dv">1</span>];
    out[<span class="dv">7</span>] = in-&gt;quux[<span class="dv">2</span>];
    out[<span class="dv">8</span>] = in-&gt;quux[<span class="dv">3</span>];
    <span class="kw">return</span> <span class="dv">9</span>; <span class="co">// bytes written</span>
}

size_t deserialise (<span class="dt">const</span> <span class="dt">uint8_t</span> * in, <span class="kw">struct</span> foo * out)
{
    out-&gt;bar = in[<span class="dv">0</span>] | in[<span class="dv">1</span>] &lt;&lt; <span class="dv">8</span> | in[<span class="dv">2</span>] &lt;&lt; <span class="dv">16</span> | in[<span class="dv">3</span>] &lt;&lt; <span class="dv">24</span>;
    out-&gt;baz = in[<span class="dv">4</span>];
    out-&gt;quux[<span class="dv">0</span>] = in[<span class="dv">5</span>];
    out-&gt;quux[<span class="dv">1</span>] = in[<span class="dv">6</span>];
    out-&gt;quux[<span class="dv">2</span>] = in[<span class="dv">6</span>];
    out-&gt;quux[<span class="dv">3</span>] = in[<span class="dv">8</span>];
    <span class="kw">return</span> <span class="dv">9</span>; <span class="co">// bytes recovered</span>
}</code></pre>
<p>I’ve hard-coded lots of stuff there, all the indices and the bytes read and written. I’ve also put an obvious bug into the indices to show the checker working. The header file is also important, because it defines what the interface is to the Haskell side (or any other code).</p>
<pre class="sourceCode cpp" include="includes/ffi-intro/foo.h"><code class="sourceCode cpp"><span class="ot">#include &lt;stdint.h&gt;</span>
<span class="ot">#include &lt;string.h&gt;</span>

<span class="ot">#ifdef __cplusplus</span>
<span class="kw">extern</span> <span class="st">&quot;C&quot;</span> {
<span class="ot">#endif</span>

<span class="kw">typedef</span> <span class="kw">struct</span> foo
{
    <span class="dt">uint32_t</span> bar;
    <span class="dt">int8_t</span>   baz;
    <span class="dt">int8_t</span>   quux[<span class="dv">4</span>];
} foo_t;

size_t serialise   (<span class="dt">const</span> <span class="kw">struct</span> foo *, <span class="dt">uint8_t</span> *);
size_t deserialise (<span class="dt">const</span> <span class="dt">uint8_t</span> *, <span class="kw">struct</span> foo *);

<span class="ot">#ifdef __cplusplus</span>
}
<span class="ot">#endif</span></code></pre>
<p>In particular the header file should define the structure if we want to tell Haskell how it works.</p>
<p>As I said before, you need to ensure the <code>extern &quot;C&quot;</code> stuff is there otherwise you’ll fail at the linking stage. This means that polymorphic C++ code won’t work directly — you’ll have to write a C wrapper and attach to that.</p>
<p>To run Haskell tests on C++ code we need the C++ object file. I’m using the filename <code>foo.cpp.o</code> instead of <code>foo.o</code> here to highlight an important point. If you’re compiling all this in the same directory as the Haskell code, and you’ve got a <code>foo.cpp</code> and a <code>Foo.hs</code> then GHC will likely clobber the object file you’ve already written — it doesn’t pay attention to difference in case. So for simplicity’s sake, either rename the Haskell source file so it’s not the same or rename the C/C++ object file so it’s not the same.</p>
<pre><code>$ gcc -o foo.cpp.o -c foo.cpp</code></pre>
<p>If you forgot to tell the compiler that these are C-compatible functions with the <code>extern</code> keyword then the output will look like this:</p>
<pre><code>$ nm foo.cpp.o
0000000000000148 s EH_frame0
00000000000000b0 T __Z11deserialisePKhP3foo
0000000000000190 S __Z11deserialisePKhP3foo.eh
0000000000000000 T __Z9serialisePK3fooPh
0000000000000160 S __Z9serialisePK3fooPh.eh</code></pre>
<p>whereas we want them to look more like this:</p>
<pre><code>$ nm foo.cpp.o
0000000000000148 s EH_frame0
00000000000000b0 T _deserialise
0000000000000190 S _deserialise.eh
0000000000000000 T _serialise
0000000000000160 S _serialise.eh</code></pre>
<h3 id="bridging-the-gap">Bridging the gap</h3>
<p>Next we create a bridge between the two different languages. This is not difficult but can be a bit fiddly. I’m using Hsc2Hs here which is the simplest to understand but requires a bit of boilerplate. Essentially it’s a Haskell file with C-style interjections. The <code>hsc2hs</code> will process the C-like stuff and replace it with extra Haskell.</p>
<pre class="sourceCode haskell" include="includes/ffi-intro/Foo.hsc"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE ForeignFunctionInterface #-}</span>
<span class="kw">module</span> <span class="dt">Foo</span> <span class="kw">where</span>

<span class="fu">#</span>include <span class="st">&quot;foo.h&quot;</span>

<span class="kw">import</span> Foreign <span class="kw">hiding</span> (unsafePerformIO)
<span class="kw">import</span> Foreign.Marshal.Array
<span class="kw">import</span> Foreign.Storable
<span class="kw">import</span> System.IO.Unsafe (unsafePerformIO)

<span class="kw">data</span> <span class="dt">Foo</span> <span class="fu">=</span> <span class="dt">Foo</span>
    {<span class="ot"> fooBar  ::</span> <span class="fu">#</span>{<span class="kw">type</span> uint32_t}
    ,<span class="ot"> fooBaz  ::</span> <span class="fu">#</span>{<span class="kw">type</span> int8_t}
    ,<span class="ot"> fooQuux ::</span> [<span class="fu">#</span>{<span class="kw">type</span> int8_t}]
    } <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)

<span class="kw">instance</span> <span class="dt">Storable</span> <span class="dt">Foo</span> <span class="kw">where</span>
    sizeOf _    <span class="fu">=</span> <span class="fu">#</span>{size foo_t}
    alignment _ <span class="fu">=</span> alignment (undefined<span class="ot"> ::</span> <span class="dt">Word32</span>)

    peek ptr <span class="fu">=</span> <span class="kw">do</span>
        r1 <span class="ot">&lt;-</span> <span class="fu">#</span>{peek foo_t, bar} ptr
        r2 <span class="ot">&lt;-</span> <span class="fu">#</span>{peek foo_t, baz} ptr
        r3 <span class="ot">&lt;-</span> peekArray <span class="dv">4</span> <span class="fu">$</span> <span class="fu">#</span>{ptr foo_t, quux} ptr
        return (<span class="dt">Foo</span> r1 r2 r3)

    poke ptr (<span class="dt">Foo</span> r1 r2 r3) <span class="fu">=</span> <span class="kw">do</span>
        <span class="fu">#</span>{poke foo_t, bar} ptr r1
        <span class="fu">#</span>{poke foo_t, baz} ptr r2
        pokeArray (<span class="fu">#</span>{ptr foo_t, quux} ptr) r3

<span class="kw">type</span> <span class="dt">Buffer</span> <span class="fu">=</span> [<span class="dt">Word8</span>]

foreign <span class="kw">import</span> ccall &quot;foo.h serialise&quot;
<span class="ot">    c_serialise ::</span> <span class="dt">Ptr</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">Ptr</span> <span class="dt">Word8</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Int</span>
foreign <span class="kw">import</span> ccall &quot;foo.h deserialise&quot;
<span class="ot">    c_deserialise ::</span> <span class="dt">Ptr</span> <span class="dt">Word8</span> <span class="ot">-&gt;</span> <span class="dt">Ptr</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Int</span>

<span class="ot">serialise ::</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">Buffer</span>
serialise foo <span class="fu">=</span> unsafePerformIO <span class="fu">$</span> with foo <span class="fu">$</span>
    \foo_ptr <span class="ot">-&gt;</span> allocaArray (sizeOf foo) <span class="fu">$</span>
    \buf_ptr <span class="ot">-&gt;</span> <span class="kw">do</span>
        sz <span class="ot">&lt;-</span> c_serialise foo_ptr buf_ptr
        peekArray sz buf_ptr

<span class="ot">deserialise ::</span> <span class="dt">Buffer</span> <span class="ot">-&gt;</span> <span class="dt">Foo</span>
deserialise buf <span class="fu">=</span> unsafePerformIO <span class="fu">$</span> withArray buf <span class="fu">$</span>
    \buf_ptr <span class="ot">-&gt;</span> allocaBytes (sizeOf (undefined<span class="ot"> ::</span> <span class="dt">Foo</span>)) <span class="fu">$</span>
    \foo_ptr <span class="ot">-&gt;</span> <span class="kw">do</span>
        _ <span class="ot">&lt;-</span> c_deserialise buf_ptr foo_ptr
        peek foo_ptr</code></pre>
<p>There’s a bit of personal choice as to how you interpret some of the datatypes in Haskell. You can consider a boolean value as <code>Bool</code> or as <code>Word8</code>; one more closely models the data but the other more closely models the semantics. In this case I use the <code>#{type}</code> directive which models the C type completely — the preprocessor can’t know that it’s a boolean being represented. I think this is better if you’re testing C/C++ code because it allows you to pass any valid number rather than only emitting <code>0</code> or <code>1</code>. If you want to model the semantics there are some utility functions like <code>toBool</code> and <code>fromBool</code> which will convert the data properly.</p>
<p>See also <a href="http://therning.org/magnus/archives/315" title="Using hsc2hs to marshall C structs">Magnus Therning’s informative blog post about Hsc2Hs</a>. We compile like so:</p>
<pre><code>$ hsc2hs Foo.hsc</code></pre>
<p>Now we have a C object file created by GCC and a Haskell source file created by Hsc2Hs.</p>
<ul>
<li>foo.cpp.o</li>
<li>Foo.hs</li>
</ul>
<p>If the marshalling in <code>Foo.hsc</code> is defined correctly you should be able to load the generated Haskell file into GHCi alongside the C++ object file to exercise it.</p>
<pre><code>$ ghci Foo.hs foo.cpp.o</code></pre>
<h3 id="some-code-to-test-with">Some code to test with</h3>
<p>All that’s needed now is your tests. If the code you are testing does not maintain state then all the better: you can wrap the FFI calls in <code>unsafePerformIO</code> to convince the type system that they’re pure computations. The Haskell compiler doesn’t know the external code is pure so this is your promise to the type system that it <em>is</em> pure. If you are in fact lying (or in error) then you may find odd behaviour or crashes.</p>
<pre class="sourceCode haskell" include="includes/ffi-intro/Main.hs"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>

<span class="kw">import</span> Foo

<span class="kw">import</span> Test.QuickCheck

<span class="kw">instance</span> <span class="dt">Arbitrary</span> <span class="dt">Foo</span> <span class="kw">where</span>
    arbitrary <span class="fu">=</span> <span class="kw">do</span>
        foobar  <span class="ot">&lt;-</span> arbitrary
        foobaz  <span class="ot">&lt;-</span> arbitrary
        fooquux <span class="ot">&lt;-</span> vector <span class="dv">4</span>
        return (<span class="dt">Foo</span> foobar foobaz fooquux)

prop_roundtrip <span class="fu">=</span> property <span class="fu">$</span>
    \foo <span class="ot">-&gt;</span> foo <span class="fu">==</span> deserialise (serialise foo)

main <span class="fu">=</span> quickCheck prop_roundtrip</code></pre>
<p>Auto-generating tests is much easier now that you’ve dragged the code over from the dark side. Remember to include your precompiled object file on the command line when you’re building your Haskell code.</p>
<pre><code>$ ghc --make Main.hs foo.cpp.o -o tests</code></pre>
<p>Even better of course is to write a Makefile which will do everything like that for you:</p>
<pre class="sourceCode makefile" include="includes/ffi-intro/Makefile"><code class="sourceCode makefile"><span class="dv">tests:</span><span class="dt"> Main.hs Foo.hs foo.cpp.o</span>
	ghc --make Main foo.cpp.o -o tests

<span class="dv">foo.cpp.o:</span><span class="dt"> foo.cpp foo.h</span>
	gcc -c foo.cpp -o foo.cpp.o

<span class="dv">Foo.hs:</span><span class="dt"> Foo.hsc foo.h</span>
	hsc2hs -I. Foo.hsc

<span class="dv">clean:</span>
	rm -rf *.hi *.o tests Foo.hs</code></pre>
<p>Let’s see how things fare when we attempt to check our roundtrip property.</p>
<pre><code>$ make
hsc2hs -I. Foo.hsc
gcc -c foo.cpp -o foo.cpp.o
ghc --make Main foo.cpp.o -o tests
[1 of 2] Compiling Foo              ( Foo.hs, Foo.o )
[2 of 2] Compiling Main             ( Main.hs, Main.o )
Linking tests ...

$ ./tests
Falsifiable (after 1 test): 
Foo {fooBar = 1, fooBaz = -1, fooQuux = [-1,-1,0,0]}</code></pre>
<p>Oh dear! Not a great outcome there… But now you can load up GHCi and manually run that test to see what result you get when serialising and deserialising, examining the intermediate data and ultimately tracking down the bug.</p>]]></summary>
</entry>
<entry>
    <title>The Moriarty Hypothesis</title>
    <link href="http://dougalstanton.net/posts/2013-12-31-the-moriarty-hypothesis.html" />
    <id>http://dougalstanton.net/posts/2013-12-31-the-moriarty-hypothesis.html</id>
    <published>2013-12-31T00:00:00Z</published>
    <updated>2013-12-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="figure">
<img src="http://farm2.staticflickr.com/1330/3174009125_ec49351a6d_d.jpg" />
</div>
<p>Sherlock Holmes appears in over fifty short stories and a few full-length novels. Only two of these stories contain his nemesis, Professor James Moriarty. Sir Arthur Conan Doyle introduced Moriarty in the story in which both disappear, grappling with each other as they topple over the Reichenbach Falls. Only after years of public pressure does Conan Doyle relent and bring Holmes back for another story.</p>
<ol style="list-style-type: decimal">
<li>Moriarty is the author’s mechanism to kill off Sherlock Holmes.</li>
</ol>
<p>The remainder of the Sherlock Holmes stories relate to him solving puzzles and outwitting criminals who are intelligent but not as intelligent as Holmes. These are the stories which made him famous and popular — <em>A Study in Scarlet</em>, <em>The Sign of the Four</em> etc. As readers we wish to marvel at the complex criminal schemes which Holmes can unravel with a single observation.</p>
<ol start="2" style="list-style-type: decimal">
<li>Holmes is popular because he solves puzzles unlike any normal person.</li>
</ol>
<p>Holmes was never an armchair detective — that role was filled by his brother Mycroft — but his action and adventure was in the name of solving the problem. If he could tell Inspector Lestrade where to send his men instead of doing the work himself that was all the better. He rarely took the role of chasing down criminals unless he was already in an encounter with them.</p>
<ol start="3" style="list-style-type: decimal">
<li>Holmes is not a James Bond action hero but a detective.</li>
</ol>
<p>Sherlock Holmes re-appears in countless radio, television and big screen adaptations. In many cases Moriarty exists as a malevolent presence which Holmes acknowledges from the beginning. Sooner or later the evil mastermind comes out of the shadows and the two meet. Of course a criminal mastermind is never as scary face-to-face as when hidden in the shadows so straight away Moriarty becomes less scary. Writers often attempt to compensate by making Moriarty appear unhinged and gruesome.</p>
<ol start="4" style="list-style-type: decimal">
<li>Moriarty is less scary in the light than in the shadows.</li>
</ol>
<p>Sherlock Holmes is a master of observation and deduction. He has a vast knowledge of obscure forensic data stored in his brain. Similarly Professor Moriarty is a criminal mastermind who subtly and imperceptibly controls the underworld in London and beyond. It is difficult but not impossible to create situations in which either one of them will appear as intelligent as they should but to show two vast intellects attempting to outwit each other is tricky beyond measure: both should appear to be more intelligent than the audience at all times.</p>
<ol start="5" style="list-style-type: decimal">
<li>Moriarty battling Holmes is incredibly hard to write convincingly.</li>
</ol>
<p>Moriarty attempts revenge on Sherlock Holmes whenever a plan is foiled. This was his original role — to kill off Holmes for meddling in his schemes. But if Moriarty is introduced at the start he is always involved and quickly comes for revenge. This quickly turns a detective story into an adventure. Holmes turns into Bond. The detecting disappears and is replaced by gunfights, explosions and chases across train roofs. All exciting stuff but stuff we’ve seen before, elsewhere. Stuff that we don’t watch Sherlock Holmes stories for.</p>
<ol start="6" style="list-style-type: decimal">
<li>Conclusion: Professor Moriarty ruins Sherlock Holmes.</li>
</ol>
<p>Of course (6) should not be a surprise. We knew this from (1). Moriarty was <em>designed</em> to ruin Holmes.</p>]]></summary>
</entry>
<entry>
    <title>XML Starlet (that's what she sed)</title>
    <link href="http://dougalstanton.net/posts/2013-12-09-xml-starlet-%28that%27s-what-she-said%29.html" />
    <id>http://dougalstanton.net/posts/2013-12-09-xml-starlet-%28that%27s-what-she-said%29.html</id>
    <published>2013-12-09T00:00:00Z</published>
    <updated>2013-12-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>The stream editor <code>sed</code> is a great tool for automating text editing — replacing names, date or other statements in a high-speed, programmable fashion.</p>
<p>One thing it isn’t really cut out for is XML because the structure of XML is not line-oriented. If you want to automate XML editing quickly I totally recommend <a href="http://xmlstar.sourceforge.net" title="XML Starlet Command Line XML Toolkit">XML Starlet</a> for the job. You can replace node names, attributes, values and so on nested deep inside an XML document while paying full heed to namespaces and such.</p>
<p>On top of that it also lets you see a simple overview and to select values out of documents. Once you get the hang of it you can do some really nice things. I recently got it to rewrite some version numbers inside an Eclipse <code>.cproject</code> file and the resulting script is about as readable and concise as you could hope for.</p>
<pre class="sourceCode bash"><code class="sourceCode bash"><span class="fu">xmlsed()</span>
<span class="kw">{</span>
    <span class="ot">ATTRIBUTE=$1</span>
    <span class="ot">VALUE=$2</span>
    <span class="co"># A quick hack to update build variables used for debug images.</span>
    <span class="kw">xmlstarlet</span> edit --inplace --update \
        <span class="st">&#39;//storageModule[@name=&quot;Debug&quot;]/macros/stringMacro[@name=&quot;&#39;</span><span class="ot">$ATTRIBUTE</span><span class="st">&#39;&quot;]/@value&#39;</span> <span class="kw">\</span>
        <span class="kw">-v</span> <span class="ot">$VALUE</span> .cproject
<span class="kw">}</span>

<span class="kw">xmlsed</span> DATE_DD <span class="ot">$(</span><span class="kw">date</span> +<span class="st">&#39;%d&#39;</span><span class="ot">)</span>
<span class="kw">xmlsed</span> COMPILEDBY <span class="ot">$USER</span></code></pre>
<p>Looking at the examples I have barely touched the surface of what can be done with this tool but I’m already pretty impressed with what can be achieved.</p>]]></summary>
</entry>
<entry>
    <title>What is capoeira anyway?</title>
    <link href="http://dougalstanton.net/posts/2013-12-01-what-is-capoeira-anyway.html" />
    <id>http://dougalstanton.net/posts/2013-12-01-what-is-capoeira-anyway.html</id>
    <published>2013-12-01T00:00:00Z</published>
    <updated>2013-12-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Doing something obscure like capoeira comes with the risk of being asked what it is. Unlike karate or BASE jumping or African drumming the answer is neither common knowledge nor easily to summarise. Nestor Capoeira called it the dance–fight–game, which I will go out on a limb as being a pretty atrocious description while at the same time being totally true. Work that one out.</p>
<p>I have previously called it “an Afro-Brazilian martial art crossing the boundaries of game, dance, ritual and fight”, which is not much better to be honest. It just expands on Nestor’s definition by adding the word <em>ritual</em> in there.</p>
<p>The various elements all vying for inclusion in a good description — movement, music, play, acrobatics, song, ritual, fight, dance — are just as much in opposition in definition as they are in capoeira itself. What is playful about a fight? What is ritualised about play? What is acrobatic about song? What is musical about movement?</p>
<p>Maybe the answer is to describe only what you see. It is a game of two people in a circle of others. The crowd who form the circle produce music which dictates the mood of the activity in the circle. The two inside move to the rhythms, controlling the space and responding to each others’ movements. The interaction can be aggressive or playful and is often both in quick succession. The game ends when either players or music stop. There are no points to be tallied or need to decide a winner: it is played for the sake of the game itself.</p>]]></summary>
</entry>
<entry>
    <title>Closed-doors training sessions</title>
    <link href="http://dougalstanton.net/posts/2013-11-25-closed-doors-training-sessions.html" />
    <id>http://dougalstanton.net/posts/2013-11-25-closed-doors-training-sessions.html</id>
    <published>2013-11-25T00:00:00Z</published>
    <updated>2013-11-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>We’ve finallly got a space for training capoeira on Tuesdays in Glasgow, but neither Nick or Piolho can commit until at least the new year so we’re going to use it as a “private” session for extra practice rather than a formal teaching opportunity. It’ll just be a few of us going over what we did in previous lessons and getting the chance to play more often.</p>
<p>It looks like the first time around will have only 3 attendees, which is an awkward number for a paired activity.</p>
<p>There are some things I want to work on, either just for myself or because I think it will be an interesting thing to explore. I want to look at some of the strategic sides of the game — possession of space, <a href="http://angoleiro.wordpress.com/2008/11/24/is-your-corpo-fechado/" title="Is Your Corpo Fechado? by Angoleiro">corpo fechado</a> and creative thinking. I think using the money game to explore the first idea is interesting because it’s all about controlling a specific area of play.</p>
<p>I’m also thinking about a kind of “musical statues” thing to encourage thinking about stability and protective postures but that’s something I want to flesh out in my head more before I suggest it to others.</p>
<p>But first I think we should just start with the basics: a straight-forward sequence and some extended play. I must remember to pack the pandeiro.</p>]]></summary>
</entry>
<entry>
    <title>Life as a game, measured in blog posts and coffee spoons</title>
    <link href="http://dougalstanton.net/posts/2013-11-18-life-as-a-game-measured-in-blog-posts.html" />
    <id>http://dougalstanton.net/posts/2013-11-18-life-as-a-game-measured-in-blog-posts.html</id>
    <published>2013-11-18T00:00:00Z</published>
    <updated>2013-11-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I’ve tried in the past to get into tools like <a href="http://www.fitocracy.com" title="Fitocracy, levelling-up your fitness?">Fitocracy</a>, whose gimmick is to make exercise a game in which you increase your high score by recording the physical workouts you do. I failed to get much satisfaction out of it for a couple of key reasons:</p>
<ul>
<li>My cycling doesn’t really change, so while I do about 9 miles a day it never goes above that. The total miles covered keeps going up, which does afford more points, but I feel a bit of a fraud all along. I’m not getting faster and I’m not increasing my distance either.</li>
<li>Capoeira is a dynamic skill-based activity which does not lend itself to measurement with simple numbers like distance, time, mass or speed. To use an analogy, if I could run around really fast and hit tennis balls really hard neither of these would demonstrate I was progressing at tennis. Similarly someone with a less impressive serve and a slower dash could still trounce me if they had actual tennis experience.</li>
</ul>
<p>I still have a Fitocracy account but I don’t do things which measure easily so I never use it.</p>
<p>Nick recently posted on this, <a href="http://harveynick.com/blog/2013/09/14/am-i-winning/" title="Some thoughts on Gamification">expanding the notion from simple fitness</a> to diverse aspects of life.</p>]]></summary>
</entry>
<entry>
    <title>Dividing your pie, a problem of lunchtime fairness</title>
    <link href="http://dougalstanton.net/posts/2013-11-17-dividing-your-pie.html" />
    <id>http://dougalstanton.net/posts/2013-11-17-dividing-your-pie.html</id>
    <published>2013-11-17T00:00:00Z</published>
    <updated>2013-11-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>We were sitting at the table recently with a thin slice of lemon tart from the Italian deli round the corner. The slice was too thin to cut into two similar wedges without it all going horribly wrong. So the question arose, where do you have to cut a wedge of pie across the way if you want to end up with two equal-sized (but not equal-shaped) chunks.</p>
<p>First we need some basic definitions. The area of the original whole tart when it was freshly baked is <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>π</mi><msup><mi>r</mi><mn>2</mn></msup></mrow></math>, the area of a circle. We can tell what the radius of the tart is by measuring the wedge from the thinnest point (which would have been at the centre of the tart) to the crust at the outside.</p>
<p>We are trying to find the location to cut a smaller circle which has the same origin of the larger circle. The total area of the smaller circle is exactly half of the larger circle, so any two wedges with the same arc angle will be related in this ratio — the wedge from the smaller circle will be exactly one half the area of the larger wedge. The radius of the smaller circle is the distance from the origin (which both circles share) to the outer edge of the smaller circle. This is the point where we’d cut across the larger wedge to divide them in two. We want to know the smaller radius, having measured the larger radius.</p>
<p>We will call the small unknown radius <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>r</mi></mrow></math> and the large known radius <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>R</mi></mrow></math>. We start with the basic fact that the area of the large circle is two times the area of the small circle.</p>
<p><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mn>2</mn><mi>π</mi><msup><mi>r</mi><mn>2</mn></msup><mo>=</mo><mi>π</mi><msup><mi>R</mi><mn>2</mn></msup></mrow></math></p>
<p>Both sides of the equation involve <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>π</mi></mrow></math> so we can feel reasonable cancelling that, and dividing both sides by two.</p>
<p><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msup><mi>r</mi><mn>2</mn></msup><mo>=</mo><mfrac><msup><mi>R</mi><mn>2</mn></msup><mn>2</mn></mfrac></mrow></math></p>
<p>We can see <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><msup><mi>r</mi><mn>2</mn></msup></mrow></math> in terms of <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>R</mi></mrow></math> now, so all we need is to take the square root of both sides.</p>
<p><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>r</mi><mo>=</mo><msqrt><mfrac><msup><mi>R</mi><mn>2</mn></msup><mn>2</mn></mfrac></msqrt></mrow></math></p>
<p>Once we’ve measured the side of the slice of tart we’ve got it’s very simple to determine the fairest place to cut it. Assuming the tart was baked in a 20cm dish then <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>R</mi><mo>=</mo><mn>10</mn></mrow></math>.</p>
<p><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>r</mi><mo>=</mo><msqrt><mfrac><msup><mn>10</mn><mn>2</mn></msup><mn>2</mn></mfrac></msqrt><mo>=</mo><msqrt><mn>50</mn></msqrt><mo>=</mo><mn>7</mn><mo>.</mo><mn>07</mn></mrow></math></p>
<p>The distance from point to cut is a little over 7cm.</p>]]></summary>
</entry>
<entry>
    <title>That's not my bag baby (my bag's gone missing)</title>
    <link href="http://dougalstanton.net/posts/2013-11-09-thats-not-my-bag-baby.html" />
    <id>http://dougalstanton.net/posts/2013-11-09-thats-not-my-bag-baby.html</id>
    <published>2013-11-09T00:00:00Z</published>
    <updated>2013-11-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Yesterday on the way to work the train was really busy so I put my rucksack in the overhead storage space… and forgot about it. I remembered at the exact moment that the final carriage was moving past me as I stood on the platform at Linlithgow station.</p>
<p>I reported the loss at the desk in Linlithgow train station and they phoned ahead to Waverley where the train was to terminate. I left my details and they phoned later to say that nothing had been found.</p>
<p>I phoned Edinburgh Waverley and Glasgow Queen Street lost property offices several times over the day to see if anything had been handed in by a passenger but no such luck. Apart from the rucksack itself I’ve lost:</p>
<ul>
<li>A wallet with two bank cards, a driving licence, some stamps and ten pounds in cash; and a coin purse with about four quid in small change. There will be other stuff in the wallet that I’ve forgotten about that will come to light in future when I realise it’s not available.</li>
<li>A spare battery for my front light and an Allen key multitool to deal with any bikey problems that may arise on my journey.</li>
<li>A pair of waterproof trousers, borrowed from my mum a few years ago for attending Traquair Fair in the rain and never given back. Sorry!</li>
<li>Also a gel ink pen, two bananas and an apple. That was for my lunch!</li>
</ul>
<p>The wallet is a logistical pain because it leaves me without ready access to cash at a weekend when Helen is away. The loss of the battery is annoying because (i) I just bought those lights and (ii) I spent extra on the pack with the spare battery which I never got to use.</p>
<p>A day later and neither lost property office has anything which matches my description so I will have to resign myself to cancelling, renewing and repurchasing various things. I’ve already cancelled the bank cards but now I need to get a replacement driving licence and a new wallet to put everything in. The rucksack wasn’t a great purchase anyway so maybe it’s good that I can replace that with something better for our current needs.</p>
<p>The battery I can do without — it was a spare and they are readily rechargable. (It’s a <a href="http://www.cateye.com/uk/products/detail/HL-EL460RC/" title="300 lumen front light with swappable, USB rechargable battery">CatEye Volt300</a> if you’re interested. As well as being bright it is USB rechargable so I can plug it in at work.) The Allen keys will need replaced because the flat is rapidly filling up with bikes that need maintenance and adjustment. The tool had seven different sizes of key and we have used most of them!</p>
<p>Lack of waterproof trousers will be cold in the short term (I can cycle in shorts if it’s raining) but not something I want to sustain. I don’t have the kind of commute which allows me to get really warm from just pedalling when in the depths of winter.</p>
<p>The loss of the apple and bananas has left me inconsolable.</p>]]></summary>
</entry>
<entry>
    <title>Roda with Glasgow Senzala and Professor Ouriço</title>
    <link href="http://dougalstanton.net/posts/2013-11-09-roda-with-glasgow-senzala-and-professor-ourico.html" />
    <id>http://dougalstanton.net/posts/2013-11-09-roda-with-glasgow-senzala-and-professor-ourico.html</id>
    <published>2013-11-09T00:00:00Z</published>
    <updated>2013-11-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>The Glasgow Senzala recently had an open roda and workshop with Professor Ourico<sup><a href="#fn1" class="footnoteRef" id="fnref1">1</a></sup>. I didn’t make it for the workshop but managed to get there for most of the roda.</p>
<p>I realise only now (about a week later?) that this was probably my first roda as a proper outsider. There was a workshop but I didn’t attend. The group was not an angola group. The leader of the roda was not an angoleiro. I think every roda I have attended in the past at least one of these things has been familiar to me but this time round everything was foreign.</p>
<p>At the time I felt very unsure how much I should “remain true” and how much I should try to compromise for the capoeira that was, to some degree, expected. The music was very fast — should I play fast all the time? That’s not really something I can sustain. I realised soon that it wasn’t something that other people could manage.</p>
<p>The “speed dating” approach to capoeira (as Simon described it, at least) left me unsure how interact. I felt rude buying into a game before it really got started; but then if I didn’t buy in somebody else would and then I’d never get to play. Once I’d cut in there was no chance for the game to warm up and develop; it was just straight in there full speed ahead all the time. And while there may be a time and a place for that I really missed the chance to play a decent length game. (Of course it re-emphasised what I feel is good about the slow development and slower games. I often struggle not to push things to the next level so this is a lesson I would do well to learn!)</p>
<p>I also felt unsure around so many people who seemed unsure themselves, or at least were obviously not experts. Was I being too harsh/aggressive? I’m not a very unpredictable player by any means but unfamiliarity makes everything seem twice as unpredictable — they didn’t know me and I didn’t know them. They moved differently so I had a harder time telling the relative levels of expertise.</p>
<p>It’s a tricky one but overall I would definitely like to go for more rodas there because they did things so differently.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>This apparently means hedgehog!<a href="#fnref1">↩</a></p></li>
</ol>
</div>]]></summary>
</entry>

</feed>
