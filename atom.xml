<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Looking Out To Sea</title>
    <link href="http://dougalstanton.net/atom.xml" rel="self" />
    <link href="http://dougalstanton.net" />
    <id>http://dougalstanton.net/atom.xml</id>
    <author>
        <name>Dougal Stanton</name>
        <email>blog@dougalstanton.net</email>
    </author>
    <updated>2014-03-13T00:00:00Z</updated>
    <entry>
    <title>I keep trying to not fall over and it's mostly a success</title>
    <link href="http://dougalstanton.net/posts/2014-03-13-i-keep-trying-to-not-fall-over.html" />
    <id>http://dougalstanton.net/posts/2014-03-13-i-keep-trying-to-not-fall-over.html</id>
    <published>2014-03-13T00:00:00Z</published>
    <updated>2014-03-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>That’s me completed Day 4 of skiing classes morning and afternoon. Yesterday I felt a significant amount of thigh pain. My hands and wrists are generally quite stressed from gripping on to ropes and pulling mechanisms as well as hefting skis. I’m definitely putting too much effort and muscle into these manoeuvres but I’m still scared it will all go wrong and I’ll tumble. I think I’d rather be the person with sore arms at the end of the day than the person who gets detached from the button lift and has to return to the bottom while the rest of the group wait patiently at the top. (My French small-talk hasn’t improved a great deal.)</p>
<p>Apart from pain in a number of interesting places I will try to list what I have discovered about myself, the learning process, skill lessons and so on.</p>
<ul>
<li><p>Being able to do something and being able to teach it are two different things. The two instructors I have had, Jean-Luc and Phillipe, have been great. They can spot whether you’re leaning wrong, twisting your body funny or occasionally doing something different unconsciously then explain why you’re doing it. The instructor in the level one class that I took once was not nearly as helpful but just gave orders — « ski parallèle ! » “Aye, but how?”</p></li>
<li><p>And by the same token both instructors have been really friendly. I’m the only English-speaker in one of my classes and I try to follow along as much as possible. But they’re very friendly and Jean-Luc in particular will try to translate any jokes and talk to me.</p></li>
<li><p>I’m really glad I’ve been cycling and doing capoeira for long enough to get reasonable control of my body. Sometimes this results in what we might euphemistically call “dynamic balance” (ie, I’m totally all over the shop but if I keep flailing I can stay on my feet). This is much better than just losing it! But not quite the picture of poise and elegance that my instructors exhibit.</p></li>
<li><p>There are plenty of really shallow runs that have steep lips that put me off but once I’m over them it’s all fine. That initial push over the lip is still very scary! Another scary thing is routes that have drop-off edges — one in particular is a snow-covered mountain road that is used during the summer time for the Tour de France. And like any winding mountain path there’s a sheer wall on one side and a sheer drop on the other. On any other route down I’d be perfectly capable of using the full width of the piste but somehow the idea that I might just fly off the edge is too much.</p></li>
<li><p>The colour markings on the routes seem pretty much invisible to me. All I can see are the red padding around the chairlift pylons and I can tell you that not every route is a red! The actual routes are marked with thin bits of painted wood that all basically look alike. Seriously, get your nonsense together. Combined with the non-obvious piste maps and the possibility that you find yourself at the top of a hill that you’re incapable of skiing down can be pretty paralysing. Every time I board a lift I have to ask myself “have I been this way before with an instructor?” and then the follow-up “did we have to take a special (non-obvious) route down to avoid the scary bits?”. It can really take the enjoyment out of it.</p></li>
<li><p>Did I mention the awful piste maps? Thankfully <a href="http://openpistemap.org" title="Piste maps made by user GPS submissions">Open Piste Map</a> comes to the rescue, but that shouldn’t be necessary. The others tell me that it’s not just Les Gets but <em>all</em> piste maps that have this ropey relation to actual geography while pretending to represent it. If it was either entirely symbolic (like the London Underground map) or entirely topological (like an OS map) it would be fine but they’re the worst of both. The distances aren’t accurate and the directions of lines don’t match up but the whole thing is overlaid on a fake isometric landscape that looks like it should relate to the landscape.</p></li>
<li><p>I’m not great at pushing myself to the front of the queue but frankly being at the end can be dangerous to one’s health. It’s much easier to follow the line of the instructor from just behind them than several people back with a timid skiier immediately in front. Lately we’ve been doing things which require more speed and being trapped behind a nervous person makes it much harder to pull them off without injury or loss of dignity.</p></li>
</ul>]]></summary>
</entry>
<entry>
    <title>Someone put a massive mountain there</title>
    <link href="http://dougalstanton.net/posts/2014-03-09-someone-put-a-massive-mountain-there.html" />
    <id>http://dougalstanton.net/posts/2014-03-09-someone-put-a-massive-mountain-there.html</id>
    <published>2014-03-09T00:00:00Z</published>
    <updated>2014-03-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Situation report from the scene, live as it happens! It’s 6pm on the end of my first day in the French Alps. The sun was bright and if the weather continues like this I’m going to be wearing a lot less on the slopes than I initially thought.</p>
<p>I spent the morning and afternoon with <a href="http://www.esf.net" title="Ecole du ski francais">École du Ski Français</a> as an “adulte debutant” — ie, adult beginner. I’m slowly dredging up bits of French and learning new words (<em>batons</em> for ski poles and <em>casque</em> for helmet). The instructors would translate things into English but on many occasions it wasn’t necessary.</p>
<p>For lunch I had croque monsieur, frites avec mayonnaise and biere. Again I tried to be quite confident and the words more or less made sense to everyone so that’s quite good.</p>
<p>It seems unlikely I will be able to co-ordinate a lunchtime meeting with Helen and her family as I’m totally without phone service both in the village and in the mountains. Hopefully we’re organise something in advance one day, although at the moment I’m still pretty much clueless about getting around. It’ll have to be a really obvious and central meeting point or I won’t have a clue.</p>]]></summary>
</entry>
<entry>
    <title>Capoeira introductory sessions</title>
    <link href="http://dougalstanton.net/posts/2014-03-07-capoeira-introductory-sessions.html" />
    <id>http://dougalstanton.net/posts/2014-03-07-capoeira-introductory-sessions.html</id>
    <published>2014-03-07T00:00:00Z</published>
    <updated>2014-03-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>A few weeks ago during Edinburgh University’s study week there was an institution-wide focus on “innovative learning” and through a roundabout reasoning the foreign-language department asked Mão No Chão to put on a capoeira demonstration. We rarely get total new-comers through the door in our class in Glasgow so it’s been a very long since I looked round the room and saw so many people getting to grips with the basic movements of capoeira. And what an interesting experience that was!</p>
<p>I’ve been training with Mão No Chão for about 4 years but I feel like I’ve not got much to show for that. I can’t really do anything impressive. Yet looking round the room at the newcomers that day I really saw how far I’d come and how difficult (to them) even the simplest movements seemed to be. These were all intelligent and capable adults who struggled immensely with moving on all fours and keeping a solid base while in a lunge posture. I think if anyone doubts how far they have come when learning something like capoeira they should watch some real beginners — not to laugh but to really <em>see</em> all the subtle details that they’ve internalised and have now become second nature.</p>
<p>The second aspect that really came out was how much Eastern martial arts still dominates the public understanding of martial arts. Karate is still the last word when it comes to what a <em>martial art</em> means. From that idea two notions follow. One is that what is taught in a dojo while wearing a gi <em>is</em> the definition of martial arts. The traditional European styles of boxing, fencing or wrestling are something else — probably sports — but whatever they are they don’t count. Anything which doesn’t match the karate mould isn’t martial arts at all. From this comes a second idea that any thing which doesn’t relate in some way to Eastern martial arts is odd or unusual. If we regard the Eastern martial arts as the archetype rather than a variant then anything which varies in a different direction will be seen as very strange indeed.</p>
<p>Taking all that into account really complicates any explanation of what capoeira really is. The idea that something could be a game and a ritual and a martial art with a music component all at once — and that all of these antagonistic influences could be produce something coherent — was very confusing. I don’t believe we really managed to explain anything clearly.</p>]]></summary>
</entry>
<entry>
    <title>Jane Eyre and norovirus: the truth they don't want you to know</title>
    <link href="http://dougalstanton.net/posts/2014-02-27-jane-eyre-and-norovirus%3A-the-truth.html" />
    <id>http://dougalstanton.net/posts/2014-02-27-jane-eyre-and-norovirus%3A-the-truth.html</id>
    <published>2014-02-27T00:00:00Z</published>
    <updated>2014-02-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="figure">
<img src="http://farm4.staticflickr.com/3526/3767252642_51c7de05e7.jpg" alt="Pickwick the Dodo" /><p class="caption">Pickwick the Dodo</p>
</div>
<p>Several years ago I was reading <em>Jane Eyre</em> while staying at a friend’s house prior to us all attending a wedding nearby. The night before the wedding I was very ill — and spent the night vomiting loudly to prove it. The next day while the others were at the wedding I lay in bed, dozing and reading my book.</p>
<p>After book group this weekend I decided to re-read <em>The Eyre Affair</em>, a comedy detective novel which uses <em>Jane Eyre</em> as a principal plot point. On Tuesday morning I was again violently ill and spent the next day in bed, drifting in and out of sleep and reading.</p>
<p>Now I don’t want to start pointing fingers or naming names here but there’s something quite suspicious about all this and in future I’ll be laying off <em>Jane Eyre</em> and <em>Jane Eyre</em> derivatives for the sake of my health.</p>]]></summary>
</entry>
<entry>
    <title>Critical appraisal from the inside</title>
    <link href="http://dougalstanton.net/posts/2014-02-17-critical-appraisal-from-the-inside.html" />
    <id>http://dougalstanton.net/posts/2014-02-17-critical-appraisal-from-the-inside.html</id>
    <published>2014-02-17T00:00:00Z</published>
    <updated>2014-02-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>On Tuesday we were at PITCH, an evening of new modern dance and related arts put on by <a href="http://www.conflux.co.uk/" title="Conflux Scotland, street art and physical theatre">Conflux Scotland</a>. The specific reason we knew about the event was because <a href="https://www.facebook.com/shady.phil.7" title="Shady Phil on Facebook">Shady Phil</a> (or <a href="https://www.facebook.com/spottedstripescircus" title="Spotted Stripes Circus">one of his other guises</a>, at least) was performing a piece.</p>
<p>After each performance of acrobatics/dance/drama there was space in the timetable to fill in feedback forms, and we were heavily encouraged to complete them. The specific intent of the evening was getting new and less-established artists a bit of publicity so feedback from the public was a bit part of it.</p>
<p>I really struggle when it comes to providing constructive feedback in most circumstances but when it’s someone I know doing something I’m slightly familiar with then nothing seems right. I start providing feedback on my own opinions, trying to analyse them as much as the thing in front of me — “would I say this to a stranger?”, “would I think that if I didn’t know the person?”. This is the trap I spring on myself.</p>
<p>The Bene Gesserit <em>Litany against Fear</em> comes to mind for some reason:</p>
<blockquote>
<p>Fear is the mind killer. Fear is the little-death that brings total obliteration.</p>
</blockquote>
<p>In this case not fear but introspection. Introspection is the mind killer. Introspection is the little-death that brings total indecision.</p>
<p>With anyone else I can say “oh she’s doing a bit of body popping” or “this is a bit odd” or “where do they find this weird music?” but when it’s someone I know these thoughts feel like betrayals. They come through as “oh he’s doing his capoeira thing again” or “was that meant to happen?” and I can’t enjoy the work for what it is.</p>
<p>My apologies to Phil for not completing the feedback or coming up with anything to say in person. I did enjoy the piece and the character made me think of several things — of puppets, of possession, of mistreated beasts – but I couldn’t really articulate any of these things at the time. Whether the story that I constructed in my head was the story you constructed in yours I don’t know; but it formed in my head all the same, which is important. I definitely can’t say that about all the pieces that night.</p>
<p>Here’s a bit of <a href="https://www.facebook.com/spottedstripescircus" title="Spotted Stripes Circus">Phil and Spotted Stripes Circus</a> to enjoy!</p>
<iframe width="560" height="315" src="//www.youtube.com/embed/lAsZVDFUcaQ" frameborder="0" allowfullscreen></iframe>

]]></summary>
</entry>
<entry>
    <title>First day on the ski slopes (indoors)</title>
    <link href="http://dougalstanton.net/posts/2014-02-09-first-day-on-the-ski-slopes.html" />
    <id>http://dougalstanton.net/posts/2014-02-09-first-day-on-the-ski-slopes.html</id>
    <published>2014-02-09T00:00:00Z</published>
    <updated>2014-02-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>If you’re going to try skiing then obviously you’d try it indoors for the authentic experience.</p>
<div class="figure">
<img src="http://farm1.staticflickr.com/105/283185506_fcd4816329.jpg" title="Snow Factor, or Xscape as it seems to have been called in the past" alt="Indoor ski slope" /><p class="caption">Indoor ski slope</p>
</div>
<p>We’re going away to France next month and I spent yesterday morning at <a href="http://www.snowfactor.com" title="It&#39;s a massive big shed full of probably-snow">Snow Factor</a>, “Scotland’s only indoor ski slope”. Just to add to the ersatz authenticity they even have a bar/restaurant you can ski straight into for beer and sausage. Yep, “Bar Varia”.</p>
<p>Anyway I was there at 8.30 for a 9am lesson in not-falling-over and not-being-terrified. They provide 5 major skills lessons with the idea being that once you’ve mastered all the skills you’re (a) ready to ski unsupervised on their indoor slope and (b) you should have a pretty good grounding of the basics should you want to go outdoors.</p>
<p>My session yesterday covered Skills 1 and 2 — introduction to skis and how to get into/out of them; standing, moving on the flat and not falling over; maintaining balance and slowing down on a slope; and turning.</p>
<p>The pre-lesson setup was quite poor. The website advertises “introduction to fitting and equipment” but that basically amounts to them saying “what size shoes do you take?” and letting you get on with it. They have a fancy machine that measures your height and weight and interrogates you on your skiing style (a bit odd to ask a beginner, surely?). The printout produced tells the people working at the equipment counter what to give you but no explanation is provided as to why you were asked these questions and what you have let yourself in for by answering one way or another.</p>
<p>Through the doors we came to the foot of two slopes. The larger of the two was just a leisure slope with skiiers and snowboarders enjoying themselves. The smaller (and shallower) one was the instruction slope where we spent the day. At the far end of the valley between the two slopes was an ice climbing wall (looked a bit like a pillar of pale blue Swiss cheese) and further up the hill a sledging and rubber ring course.</p>
<p>Our initial tasks were one-footed. We learned to clip and unclip one-footed, move around the flat on one ski and — starting from a few metres up the slope — ski downhill one on ski. This was <em>really</em> hard and nobody managed it consistently, especially moving to your weaker leg.</p>
<p>Two skis proved much easier when it came to actual skiing (unsurprisingly). My only complaint initially was that because it was a large group (about ten) there was a lot of queueing and waiting between short attempts at skiing. Once the group started to be separate into different skill levels for more practise it became easier for everyone to improve.</p>
<p>I’ve booked another lesson for Skill 3, which I think is more nuanced turning skills. Until then, stay frosty!</p>
<hr />
<p>Photo courtesy of <a href="http://flic.kr/p/r2pbJ">Brian Digital</a> on Flickr.</p>]]></summary>
</entry>
<entry>
    <title>Settling into new job</title>
    <link href="http://dougalstanton.net/posts/2014-02-04-settling-into-new-job.html" />
    <id>http://dougalstanton.net/posts/2014-02-04-settling-into-new-job.html</id>
    <published>2014-02-04T00:00:00Z</published>
    <updated>2014-02-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>That’s been three months in my new job now — I know this because today I passed my probation and became a “proper” employee.</p>
<p>I have settled into the daily work, which is doing embedded development for <a href="http://www.spirent.com/Products/Attero" title="Spirent Attero powered by Calnex Solutions">the Attero network impairment device</a>. It’s a device for letting you fake failure in a network, so you can design a system that will be able to cope with different types of failure. (Talk to a sales representative now!)</p>
<p>The trials of embedded development are the same as ever — in order to recreate a problem or test a fix you have to spend an extraordinary amount of time looking for cables.</p>
<p>The commute is less stressful than my old one. I don’t do much travelling on the roads any more. As the day gets longer I will probably do even less as cycling to Linlithgow train station around the loch will be a viable alternative to the main road through the town. Linlithgow is a nice little place but it’s total madness on the roads. The route through the town is not much wider than two cars in places but that doesn’t stop full-sized lorries and coaches travelling through. The whole town is a 20MPH zone though I’m doubtful many vehicles pay attention to that either.</p>
<p>If I don’t get to work via the loch I can get to an accessible supermarket on Monday morning to buy fruit and breakfast cereal for the week. Though somehow the Linlithgow Sainsburys has managed to find a design of bike rack that is slightly too fat for the standard Kryptonite D-lock.</p>
<p>I’ve been out a few times at lunch for a short cycle but the path round the loch gets busy with dog walkers during the day. When the weather gets warmer still I hope to get out there properly. Many people go to the gym or the pool at lunch so getting out for a ride seems very reasonable. And maybe one day I’ll cycle a bit further on my commute — somewhere along the canal to the Falkirk Wheel maybe — before hopping on a train for home.</p>]]></summary>
</entry>
<entry>
    <title>Write code to write posts to write code</title>
    <link href="http://dougalstanton.net/posts/2014-01-28-write-code-to-write-posts-to-write-code.html" />
    <id>http://dougalstanton.net/posts/2014-01-28-write-code-to-write-posts-to-write-code.html</id>
    <published>2014-01-28T00:00:00Z</published>
    <updated>2014-01-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>There is a belief among certain programmers that if you’re having a problem with your code you should sit someone down and talk them through it — and that during the explanation your problem will become apparent to you. The very act of organising your thoughts enough to verbalise them will bring the issue to light.</p>
<p>Some people take this to an extreme and believe that since the listener doesn’t need to be an active participant (they don’t need to prompt you or seek clarification, just listen) they don’t even need to be there at all. Or at least, they don’t need to be an actual person. And so was born <a href="http://en.wikipedia.org/wiki/Rubber_duck_debugging" title="Rubber duck debugging, defined by Wikipedia">rubber ducking</a> — the process of solving your problems by explaining them to a rubber duck. Now don’t anyone ever tell me that programmers have a problem talking to others!</p>
<p>I mention this because writing about programming is a similarly intense way of making you really think through the code. But instead of making you solve your problems it brings you face to face with the ugliness of your code. In the past if I’ve been blogging about code I end up making little “cosmetic edits” after I’ve pasted code snippets into my document. As the edits get bolder the chance of introducing an inconsistency or a flaw into the code becomes higher. Before you know it you’re writing about beautiful but buggy code.</p>
<p>The only way to stop this from happening is by making sure that the changes made to the code are compiled after every edit. For my last post about using QuickCheck with C and C++ I spent a fair amount of time writing an extra bit of function for the blogging software to include the source into post “by reference”:</p>
<pre><code>```{.cpp include=&quot;path/to/file&quot;}
```</code></pre>
<p>Hakyll doesn’t do this as standard but luckily PanDoc (which is used for format conversion under the hood) is programmable and even includes this very example in the tutorial.</p>
<p>This left me with another problem, which is that I needed to “compile” the page in order to preview it at all. So I ended up making more changes to compile draft documents and keep them separate from real blog posts. Basically I ended up doing a <em>lot</em> of faffing to write that last post.</p>
<p>And after all that I still feel the urge to paste in the code that I used to do it. But then I’d inevitably want to fiddle, and so we end up where we started.</p>]]></summary>
</entry>
<entry>
    <title>Testing embedded C++ with Haskell QuickCheck</title>
    <link href="http://dougalstanton.net/posts/2014-01-25-quickcheck-tests-for-c-cpp-code.html" />
    <id>http://dougalstanton.net/posts/2014-01-25-quickcheck-tests-for-c-cpp-code.html</id>
    <published>2014-01-25T00:00:00Z</published>
    <updated>2014-01-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>If you work with C or C++ and are hankering after the testing power of <a href="http://hackage.haskell.org/package/QuickCheck" title="A library for random testing of program properties">QuickCheck for property tests</a>, this is your lucky day.</p>
<p>If you’ve got C++ code you have to bear a couple of things in mind. If it’s vanilla C then you’re okay.</p>
<ul>
<li>The code under test needs to be C-compatible, so using <code>extern C</code> otherwise the name mangler will prevent your linker from finding the correct symbols.</li>
<li>You have to manage the compilation steps manually or using an ordinary Makefile. The CABAL system doesn’t recognise <code>.cpp</code> files so won’t process them properly on its own.</li>
</ul>
<p>These are not grave restrictions by any means. This is how it’s done. First, we will see the files we have to start with. These are the ones which we have to write and cannot be autogenerated:</p>
<ul>
<li>foo.cpp</li>
<li>foo.h</li>
<li>Foo.hsc</li>
<li>Main.hs</li>
</ul>
<p>The first two comprise your “system under test”. The next two are the Haskell/C bridge file which handles marshalling and the Haskell test executable. As your system gets more complex you might obviously add to these.</p>
<p>I will work through this list of files in order, showing what they contain and how they can be used to generate further dependencies until the test system is complete.</p>
<h3 id="some-code-to-test">Some code to test</h3>
<p>First we have the C++ code we’re testing. I’m going to use the example of data transfer over a network. We’ve got some data structure which we need to transmit or receive. A simple way of testing whether we are internally consistent is making sure we can always decode the same data we encoded. This is the “round trip” test.</p>
<p><math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mtext mathvariant="monospace">id</mtext><mo>=</mo><mtext mathvariant="monospace">deserialise</mtext><mo>⋅</mo><mtext mathvariant="monospace">serialise</mtext></mrow></math></p>
<p>So <code>foo.cpp</code> contains a simple struct and a pair of functions that should operate as a “round trip”, serialising and then deserialising the input.</p>
<pre class="sourceCode cpp" include="includes/ffi-intro/foo.cpp"><code class="sourceCode cpp"><span class="ot">#include &quot;foo.h&quot;</span>

size_t serialise (<span class="dt">const</span> <span class="kw">struct</span> foo * in, <span class="dt">uint8_t</span> * out)
{
    out[<span class="dv">0</span>] = in-&gt;bar &amp; <span class="bn">0x000000ff</span>;
    out[<span class="dv">1</span>] = (in-&gt;bar &amp; <span class="bn">0x0000ff00</span>) &gt;&gt; <span class="dv">8</span>;
    out[<span class="dv">2</span>] = (in-&gt;bar &amp; <span class="bn">0x00ff0000</span>) &gt;&gt; <span class="dv">16</span>;
    out[<span class="dv">3</span>] = (in-&gt;bar &amp; <span class="bn">0xff000000</span>) &gt;&gt; <span class="dv">24</span>;
    out[<span class="dv">4</span>] = in-&gt;baz;
    out[<span class="dv">5</span>] = in-&gt;quux[<span class="dv">0</span>];
    out[<span class="dv">6</span>] = in-&gt;quux[<span class="dv">1</span>];
    out[<span class="dv">7</span>] = in-&gt;quux[<span class="dv">2</span>];
    out[<span class="dv">8</span>] = in-&gt;quux[<span class="dv">3</span>];
    <span class="kw">return</span> <span class="dv">9</span>; <span class="co">// bytes written</span>
}

size_t deserialise (<span class="dt">const</span> <span class="dt">uint8_t</span> * in, <span class="kw">struct</span> foo * out)
{
    out-&gt;bar = in[<span class="dv">0</span>] | in[<span class="dv">1</span>] &lt;&lt; <span class="dv">8</span> | in[<span class="dv">2</span>] &lt;&lt; <span class="dv">16</span> | in[<span class="dv">3</span>] &lt;&lt; <span class="dv">24</span>;
    out-&gt;baz = in[<span class="dv">4</span>];
    out-&gt;quux[<span class="dv">0</span>] = in[<span class="dv">5</span>];
    out-&gt;quux[<span class="dv">1</span>] = in[<span class="dv">6</span>];
    out-&gt;quux[<span class="dv">2</span>] = in[<span class="dv">6</span>];
    out-&gt;quux[<span class="dv">3</span>] = in[<span class="dv">8</span>];
    <span class="kw">return</span> <span class="dv">9</span>; <span class="co">// bytes recovered</span>
}</code></pre>
<p>I’ve hard-coded lots of stuff there, all the indices and the bytes read and written. I’ve also put an obvious bug into the indices to show the checker working. The header file is also important, because it defines what the interface is to the Haskell side (or any other code).</p>
<pre class="sourceCode cpp" include="includes/ffi-intro/foo.h"><code class="sourceCode cpp"><span class="ot">#include &lt;stdint.h&gt;</span>
<span class="ot">#include &lt;string.h&gt;</span>

<span class="ot">#ifdef __cplusplus</span>
<span class="kw">extern</span> <span class="st">&quot;C&quot;</span> {
<span class="ot">#endif</span>

<span class="kw">typedef</span> <span class="kw">struct</span> foo
{
    <span class="dt">uint32_t</span> bar;
    <span class="dt">int8_t</span>   baz;
    <span class="dt">int8_t</span>   quux[<span class="dv">4</span>];
} foo_t;

size_t serialise   (<span class="dt">const</span> <span class="kw">struct</span> foo *, <span class="dt">uint8_t</span> *);
size_t deserialise (<span class="dt">const</span> <span class="dt">uint8_t</span> *, <span class="kw">struct</span> foo *);

<span class="ot">#ifdef __cplusplus</span>
}
<span class="ot">#endif</span></code></pre>
<p>In particular the header file should define the structure if we want to tell Haskell how it works.</p>
<p>As I said before, you need to ensure the <code>extern &quot;C&quot;</code> stuff is there otherwise you’ll fail at the linking stage. This means that polymorphic C++ code won’t work directly — you’ll have to write a C wrapper and attach to that.</p>
<p>To run Haskell tests on C++ code we need the C++ object file. I’m using the filename <code>foo.cpp.o</code> instead of <code>foo.o</code> here to highlight an important point. If you’re compiling all this in the same directory as the Haskell code, and you’ve got a <code>foo.cpp</code> and a <code>Foo.hs</code> then GHC will likely clobber the object file you’ve already written — it doesn’t pay attention to difference in case. So for simplicity’s sake, either rename the Haskell source file so it’s not the same or rename the C/C++ object file so it’s not the same.</p>
<pre><code>$ gcc -o foo.cpp.o -c foo.cpp</code></pre>
<p>If you forgot to tell the compiler that these are C-compatible functions with the <code>extern</code> keyword then the output will look like this:</p>
<pre><code>$ nm foo.cpp.o
0000000000000148 s EH_frame0
00000000000000b0 T __Z11deserialisePKhP3foo
0000000000000190 S __Z11deserialisePKhP3foo.eh
0000000000000000 T __Z9serialisePK3fooPh
0000000000000160 S __Z9serialisePK3fooPh.eh</code></pre>
<p>whereas we want them to look more like this:</p>
<pre><code>$ nm foo.cpp.o
0000000000000148 s EH_frame0
00000000000000b0 T _deserialise
0000000000000190 S _deserialise.eh
0000000000000000 T _serialise
0000000000000160 S _serialise.eh</code></pre>
<h3 id="bridging-the-gap">Bridging the gap</h3>
<p>Next we create a bridge between the two different languages. This is not difficult but can be a bit fiddly. I’m using Hsc2Hs here which is the simplest to understand but requires a bit of boilerplate. Essentially it’s a Haskell file with C-style interjections. The <code>hsc2hs</code> will process the C-like stuff and replace it with extra Haskell.</p>
<pre class="sourceCode haskell" include="includes/ffi-intro/Foo.hsc"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE ForeignFunctionInterface #-}</span>
<span class="kw">module</span> <span class="dt">Foo</span> <span class="kw">where</span>

<span class="fu">#</span>include <span class="st">&quot;foo.h&quot;</span>

<span class="kw">import</span> Foreign <span class="kw">hiding</span> (unsafePerformIO)
<span class="kw">import</span> Foreign.Marshal.Array
<span class="kw">import</span> Foreign.Storable
<span class="kw">import</span> System.IO.Unsafe (unsafePerformIO)

<span class="kw">data</span> <span class="dt">Foo</span> <span class="fu">=</span> <span class="dt">Foo</span>
    {<span class="ot"> fooBar  ::</span> <span class="fu">#</span>{<span class="kw">type</span> uint32_t}
    ,<span class="ot"> fooBaz  ::</span> <span class="fu">#</span>{<span class="kw">type</span> int8_t}
    ,<span class="ot"> fooQuux ::</span> [<span class="fu">#</span>{<span class="kw">type</span> int8_t}]
    } <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)

<span class="kw">instance</span> <span class="dt">Storable</span> <span class="dt">Foo</span> <span class="kw">where</span>
    sizeOf _    <span class="fu">=</span> <span class="fu">#</span>{size foo_t}
    alignment _ <span class="fu">=</span> alignment (undefined<span class="ot"> ::</span> <span class="dt">Word32</span>)

    peek ptr <span class="fu">=</span> <span class="kw">do</span>
        r1 <span class="ot">&lt;-</span> <span class="fu">#</span>{peek foo_t, bar} ptr
        r2 <span class="ot">&lt;-</span> <span class="fu">#</span>{peek foo_t, baz} ptr
        r3 <span class="ot">&lt;-</span> peekArray <span class="dv">4</span> <span class="fu">$</span> <span class="fu">#</span>{ptr foo_t, quux} ptr
        return (<span class="dt">Foo</span> r1 r2 r3)

    poke ptr (<span class="dt">Foo</span> r1 r2 r3) <span class="fu">=</span> <span class="kw">do</span>
        <span class="fu">#</span>{poke foo_t, bar} ptr r1
        <span class="fu">#</span>{poke foo_t, baz} ptr r2
        pokeArray (<span class="fu">#</span>{ptr foo_t, quux} ptr) r3

<span class="kw">type</span> <span class="dt">Buffer</span> <span class="fu">=</span> [<span class="dt">Word8</span>]

foreign <span class="kw">import</span> ccall &quot;foo.h serialise&quot;
<span class="ot">    c_serialise ::</span> <span class="dt">Ptr</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">Ptr</span> <span class="dt">Word8</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Int</span>
foreign <span class="kw">import</span> ccall &quot;foo.h deserialise&quot;
<span class="ot">    c_deserialise ::</span> <span class="dt">Ptr</span> <span class="dt">Word8</span> <span class="ot">-&gt;</span> <span class="dt">Ptr</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Int</span>

<span class="ot">serialise ::</span> <span class="dt">Foo</span> <span class="ot">-&gt;</span> <span class="dt">Buffer</span>
serialise foo <span class="fu">=</span> unsafePerformIO <span class="fu">$</span> with foo <span class="fu">$</span>
    \foo_ptr <span class="ot">-&gt;</span> allocaArray (sizeOf foo) <span class="fu">$</span>
    \buf_ptr <span class="ot">-&gt;</span> <span class="kw">do</span>
        sz <span class="ot">&lt;-</span> c_serialise foo_ptr buf_ptr
        peekArray sz buf_ptr

<span class="ot">deserialise ::</span> <span class="dt">Buffer</span> <span class="ot">-&gt;</span> <span class="dt">Foo</span>
deserialise buf <span class="fu">=</span> unsafePerformIO <span class="fu">$</span> withArray buf <span class="fu">$</span>
    \buf_ptr <span class="ot">-&gt;</span> allocaBytes (sizeOf (undefined<span class="ot"> ::</span> <span class="dt">Foo</span>)) <span class="fu">$</span>
    \foo_ptr <span class="ot">-&gt;</span> <span class="kw">do</span>
        _ <span class="ot">&lt;-</span> c_deserialise buf_ptr foo_ptr
        peek foo_ptr</code></pre>
<p>There’s a bit of personal choice as to how you interpret some of the datatypes in Haskell. You can consider a boolean value as <code>Bool</code> or as <code>Word8</code>; one more closely models the data but the other more closely models the semantics. In this case I use the <code>#{type}</code> directive which models the C type completely — the preprocessor can’t know that it’s a boolean being represented. I think this is better if you’re testing C/C++ code because it allows you to pass any valid number rather than only emitting <code>0</code> or <code>1</code>. If you want to model the semantics there are some utility functions like <code>toBool</code> and <code>fromBool</code> which will convert the data properly.</p>
<p>See also <a href="http://therning.org/magnus/archives/315" title="Using hsc2hs to marshall C structs">Magnus Therning’s informative blog post about Hsc2Hs</a>. We compile like so:</p>
<pre><code>$ hsc2hs Foo.hsc</code></pre>
<p>Now we have a C object file created by GCC and a Haskell source file created by Hsc2Hs.</p>
<ul>
<li>foo.cpp.o</li>
<li>Foo.hs</li>
</ul>
<p>If the marshalling in <code>Foo.hsc</code> is defined correctly you should be able to load the generated Haskell file into GHCi alongside the C++ object file to exercise it.</p>
<pre><code>$ ghci Foo.hs foo.cpp.o</code></pre>
<h3 id="some-code-to-test-with">Some code to test with</h3>
<p>All that’s needed now is your tests. If the code you are testing does not maintain state then all the better: you can wrap the FFI calls in <code>unsafePerformIO</code> to convince the type system that they’re pure computations. The Haskell compiler doesn’t know the external code is pure so this is your promise to the type system that it <em>is</em> pure. If you are in fact lying (or in error) then you may find odd behaviour or crashes.</p>
<pre class="sourceCode haskell" include="includes/ffi-intro/Main.hs"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>

<span class="kw">import</span> Foo

<span class="kw">import</span> Test.QuickCheck

<span class="kw">instance</span> <span class="dt">Arbitrary</span> <span class="dt">Foo</span> <span class="kw">where</span>
    arbitrary <span class="fu">=</span> <span class="kw">do</span>
        foobar  <span class="ot">&lt;-</span> arbitrary
        foobaz  <span class="ot">&lt;-</span> arbitrary
        fooquux <span class="ot">&lt;-</span> vector <span class="dv">4</span>
        return (<span class="dt">Foo</span> foobar foobaz fooquux)

prop_roundtrip <span class="fu">=</span> property <span class="fu">$</span>
    \foo <span class="ot">-&gt;</span> foo <span class="fu">==</span> deserialise (serialise foo)

main <span class="fu">=</span> quickCheck prop_roundtrip</code></pre>
<p>Auto-generating tests is much easier now that you’ve dragged the code over from the dark side. Remember to include your precompiled object file on the command line when you’re building your Haskell code.</p>
<pre><code>$ ghc --make Main.hs foo.cpp.o -o tests</code></pre>
<p>Even better of course is to write a Makefile which will do everything like that for you:</p>
<pre class="sourceCode makefile" include="includes/ffi-intro/Makefile"><code class="sourceCode makefile"><span class="dv">tests:</span><span class="dt"> Main.hs Foo.hs foo.cpp.o</span>
	ghc --make Main foo.cpp.o -o tests

<span class="dv">foo.cpp.o:</span><span class="dt"> foo.cpp foo.h</span>
	gcc -c foo.cpp -o foo.cpp.o

<span class="dv">Foo.hs:</span><span class="dt"> Foo.hsc foo.h</span>
	hsc2hs -I. Foo.hsc

<span class="dv">clean:</span>
	rm -rf *.hi *.o tests Foo.hs</code></pre>
<p>Let’s see how things fare when we attempt to check our roundtrip property.</p>
<pre><code>$ make
hsc2hs -I. Foo.hsc
gcc -c foo.cpp -o foo.cpp.o
ghc --make Main foo.cpp.o -o tests
[1 of 2] Compiling Foo              ( Foo.hs, Foo.o )
[2 of 2] Compiling Main             ( Main.hs, Main.o )
Linking tests ...

$ ./tests
Falsifiable (after 1 test): 
Foo {fooBar = 1, fooBaz = -1, fooQuux = [-1,-1,0,0]}</code></pre>
<p>Oh dear! Not a great outcome there… But now you can load up GHCi and manually run that test to see what result you get when serialising and deserialising, examining the intermediate data and ultimately tracking down the bug.</p>]]></summary>
</entry>
<entry>
    <title>The Moriarty Hypothesis</title>
    <link href="http://dougalstanton.net/posts/2013-12-31-the-moriarty-hypothesis.html" />
    <id>http://dougalstanton.net/posts/2013-12-31-the-moriarty-hypothesis.html</id>
    <published>2013-12-31T00:00:00Z</published>
    <updated>2013-12-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="figure">
<img src="http://farm2.staticflickr.com/1330/3174009125_ec49351a6d_d.jpg" />
</div>
<p>Sherlock Holmes appears in over fifty short stories and a few full-length novels. Only two of these stories contain his nemesis, Professor James Moriarty. Sir Arthur Conan Doyle introduced Moriarty in the story in which both disappear, grappling with each other as they topple over the Reichenbach Falls. Only after years of public pressure does Conan Doyle relent and bring Holmes back for another story.</p>
<ol style="list-style-type: decimal">
<li>Moriarty is the author’s mechanism to kill off Sherlock Holmes.</li>
</ol>
<p>The remainder of the Sherlock Holmes stories relate to him solving puzzles and outwitting criminals who are intelligent but not as intelligent as Holmes. These are the stories which made him famous and popular — <em>A Study in Scarlet</em>, <em>The Sign of the Four</em> etc. As readers we wish to marvel at the complex criminal schemes which Holmes can unravel with a single observation.</p>
<ol start="2" style="list-style-type: decimal">
<li>Holmes is popular because he solves puzzles unlike any normal person.</li>
</ol>
<p>Holmes was never an armchair detective — that role was filled by his brother Mycroft — but his action and adventure was in the name of solving the problem. If he could tell Inspector Lestrade where to send his men instead of doing the work himself that was all the better. He rarely took the role of chasing down criminals unless he was already in an encounter with them.</p>
<ol start="3" style="list-style-type: decimal">
<li>Holmes is not a James Bond action hero but a detective.</li>
</ol>
<p>Sherlock Holmes re-appears in countless radio, television and big screen adaptations. In many cases Moriarty exists as a malevolent presence which Holmes acknowledges from the beginning. Sooner or later the evil mastermind comes out of the shadows and the two meet. Of course a criminal mastermind is never as scary face-to-face as when hidden in the shadows so straight away Moriarty becomes less scary. Writers often attempt to compensate by making Moriarty appear unhinged and gruesome.</p>
<ol start="4" style="list-style-type: decimal">
<li>Moriarty is less scary in the light than in the shadows.</li>
</ol>
<p>Sherlock Holmes is a master of observation and deduction. He has a vast knowledge of obscure forensic data stored in his brain. Similarly Professor Moriarty is a criminal mastermind who subtly and imperceptibly controls the underworld in London and beyond. It is difficult but not impossible to create situations in which either one of them will appear as intelligent as they should but to show two vast intellects attempting to outwit each other is tricky beyond measure: both should appear to be more intelligent than the audience at all times.</p>
<ol start="5" style="list-style-type: decimal">
<li>Moriarty battling Holmes is incredibly hard to write convincingly.</li>
</ol>
<p>Moriarty attempts revenge on Sherlock Holmes whenever a plan is foiled. This was his original role — to kill off Holmes for meddling in his schemes. But if Moriarty is introduced at the start he is always involved and quickly comes for revenge. This quickly turns a detective story into an adventure. Holmes turns into Bond. The detecting disappears and is replaced by gunfights, explosions and chases across train roofs. All exciting stuff but stuff we’ve seen before, elsewhere. Stuff that we don’t watch Sherlock Holmes stories for.</p>
<ol start="6" style="list-style-type: decimal">
<li>Conclusion: Professor Moriarty ruins Sherlock Holmes.</li>
</ol>
<p>Of course (6) should not be a surprise. We knew this from (1). Moriarty was <em>designed</em> to ruin Holmes.</p>]]></summary>
</entry>

</feed>
